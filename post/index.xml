<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on System Under Test</title>
    <link>https://systemundertest.org/post/</link>
    <description>Recent content in Posts on System Under Test</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Brought to you by curious developers</copyright>
    <lastBuildDate>Mon, 10 Jul 2017 08:00:00 +0100</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rust</title>
      <link>https://systemundertest.org/rust/</link>
      <pubDate>Mon, 10 Jul 2017 08:00:00 +0100</pubDate>
      
      <guid>https://systemundertest.org/rust/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This is a cross-post from &lt;a href=&#34;https://brson.github.io&#34;&gt;Brian Anderson&amp;rsquo;s blog&lt;/a&gt;. Original post is &lt;a href=&#34;https://brson.github.io/2017/07/10/how-rust-is-tested&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rust is a systems programming language with massive ambitions. It is
designed for creating the most reliable software, from the tiniest
embedded systems to multi-million line behemoths, and its users need
to have confidence that it is fit for purpose.&lt;/p&gt;

&lt;p&gt;In service of this ambition Rust has an extremely thorough testing
regimen, and that is one of the things I am most proud of about Rust.
Rust has a strict continuous integration system that runs a great
number of tests on every pull request, basically guaranteeing that the
Rust master branch always works; which is crucial because Rust
releases nightly builds every night, and stable builds every six
weeks. And Rust further tests every release against its entire open
source library ecosystem.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always admired well-tested software projects, like &lt;a href=&#34;https://sqlite.org/testing.html&#34;&gt;SQLite&lt;/a&gt;, and
aim to place Rust among the pantheon of the best. This document then,
is a catalog of all the ways we test Rust. I hope it provides insight
into what it takes to deliver a production-quality programming
language, a hint at the wide variety of techniques employed in
software validation, and that it reinforces your confidence in Rust&amp;rsquo;s
reliability.&lt;/p&gt;

&lt;h2 id=&#34;summary-2017-07-10&#34;&gt;Summary (2017/07/10)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All patches built in 58 configurations before landing&lt;/li&gt;
&lt;li&gt;All patches tested in 20 configurations before landing&lt;/li&gt;
&lt;li&gt;126k tests per PR across all platforms&lt;/li&gt;
&lt;li&gt;Full release artifacts published for 48 platforms every merge&lt;/li&gt;
&lt;li&gt;Testing of all documentation&lt;/li&gt;
&lt;li&gt;Releases every six weeks&lt;/li&gt;
&lt;li&gt;13k Rust projects regression-tested before releases&lt;/li&gt;
&lt;li&gt;222k tests in Rust projects tested before releases&lt;/li&gt;
&lt;li&gt;Fuzz testing and formal verification&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#s-pr&#34;&gt;The promise of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-ci&#34;&gt;Continuous integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-cr&#34;&gt;Continuous releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-ts&#34;&gt;The Rust test suite&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#s-ut&#34;&gt;Unit tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-ct&#34;&gt;compiletest&lt;/a&gt; - The Rust test suite test driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-rpf&#34;&gt;run-pass and run-fail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-cf&#34;&gt;compile-fail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-ui&#34;&gt;ui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-rm&#34;&gt;run-make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-cg&#34;&gt;codegen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-cgu&#34;&gt;codegen-units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-p&#34;&gt;pretty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-dbg&#34;&gt;debuginfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-inc&#34;&gt;incremental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-mir&#34;&gt;mir-opt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-rd&#34;&gt;rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-doc&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-link&#34;&gt;linkchecker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-crt&#34;&gt;cargotest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-err&#34;&gt;check-error-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-dist&#34;&gt;distcheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-tidy&#34;&gt;tidy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-boot&#34;&gt;bootstrap&lt;/a&gt; - Build system self-check&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-tools&#34;&gt;tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-ot&#34;&gt;Other testing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#s-ds&#34;&gt;cargobomb and crater&lt;/a&gt; - Downstream testing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-libc&#34;&gt;libc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-cb&#34;&gt;compiler-builtins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-perf&#34;&gt;perf.rust-lang.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-fuzz&#34;&gt;fuzzing&lt;/a&gt; - afl.rs and cargo-fuzz&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-icci&#34;&gt;rust-icci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-fx&#34;&gt;Firefox beta testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-form&#34;&gt;Formal verification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-smoke&#34;&gt;smoke&lt;/a&gt; - Cross-platform testing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-ru&#34;&gt;rustup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-clippy&#34;&gt;clippy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-f&#34;&gt;Notes and future work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;s-pr&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-promise-of-rust&#34;&gt;The promise of Rust&lt;/h2&gt;

&lt;p&gt;Rust is a systems programming language with massive ambitions. It is
designed for creating the most reliable software, from the tiniest
embedded systems to multi-million line behemoths, and its users need
to have confidence that it is fit for purpose.&lt;/p&gt;

&lt;p&gt;Today Rust runs on &lt;a href=&#34;https://forge.rust-lang.org/platform-support.html&#34;&gt;many platforms&lt;/a&gt;, and tomorrow it will run on many
more. Rust will one day run on any machine with a microprocessor.&lt;/p&gt;

&lt;p&gt;And Rust moves fast, with &lt;a href=&#34;https://github.com/rust-lang/rfcs/blob/master/text/0507-release-channels.md&#34;&gt;releases every 6 weeks&lt;/a&gt;, and a growing
ecosystem of software depending on it. Rust makes &lt;a href=&#34;https://blog.rust-lang.org/2014/10/30/Stability.html&#34;&gt;strong guarantees&lt;/a&gt;
about compatibility and stability, what will, won&amp;rsquo;t, and might break
as the plattform evolves, and ensuring that we fulfill those
guarantees is crucial to maintaining the trust of Rust&amp;rsquo;s users.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a big challenge to keep it all from falling apart. This is how we
do it.&lt;/p&gt;

&lt;p&gt;We use strong &lt;em&gt;continuous integration&lt;/em&gt; to catch many bugs before they
are ever committed to the Rust repository, and &lt;em&gt;continuous releases&lt;/em&gt;
to enable more extensive testing of nightly and beta builds prior to
the release every 6 weeks.&lt;/p&gt;

&lt;p&gt;During CI, all patches must pass the Rust test suite in all supported
configurations before landing. Nightly and beta releases are subject
to further testing using a number of techniques.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-ci&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;continuous-integration&#34;&gt;Continuous integration&lt;/h2&gt;

&lt;p&gt;Rust relies on &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;continuous integration&lt;/a&gt;, where the code base is tested
as part of the process of reviewing and merging patches.&lt;/p&gt;

&lt;p&gt;In Rust we do CI in a very particular way, and one which we are very
proud of. Rust&amp;rsquo;s creator, Graydon, originally described it in a blog
post, &lt;a href=&#34;http://graydon2.dreamwidth.org/1597.html&#34;&gt;&amp;ldquo;The Not Rocket Science Rule&amp;rdquo;&lt;/a&gt;. The thing we do
differently from most is that we run the full test suite against every
patch, as if it were merged to master, &lt;em&gt;before&lt;/em&gt; committing it into the
master branch, whereas most CI setups test &lt;em&gt;after&lt;/em&gt; committing, or if
they do run tests against every PR, they do so before merging, leaving
open the possibility of regressions introduced during the merge.&lt;/p&gt;

&lt;p&gt;How does this work precisely? Our integration bot, &lt;a href=&#34;https://github.com/bors&#34;&gt;bors&lt;/a&gt;, maintains a
&lt;a href=&#34;https://buildbot2.rust-lang.org/homu/queue/rust&#34;&gt;queue of all pull requests&lt;/a&gt; that have been reviewed and
approved for landing. It proceeds through this queue, one at a time:
for each pull request it merges the pull request branch with the
master branch, but into a temporary branch (which we call &amp;ldquo;auto&amp;rdquo;);
then it runs the entire test suite on that branch, in many
configurations (as of 2017/07/10 there are 59 configurations built,
and 20 tested). If all tests pass in all configurations only then does
that commit become the master branch. Then bors moves onto the next
PR.&lt;/p&gt;

&lt;p&gt;The important things to recognize about this arrangement are: first,
the head commit on Rust&amp;rsquo;s master branch is guaranteed to be fully
tested at all times; but as a consequence, landing pull requests to
Rust is completely serialized - only one PR can be under final testing
at a time.&lt;/p&gt;

&lt;p&gt;The benefit of this arrangement is that Rust&amp;rsquo;s developers have high
confidence that the master branch works correctly, always. It isn&amp;rsquo;t
perfect - bugs do slip through - but it does provide significant peace
of mind.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a big downside though in that landing patches to Rust is
serialized on running the test suite on every patch, and it takes a
particularly long time to Run the Rust test suite in all the
configurations we care about. Today the longest-running configuration
takes over 2 hours. Rust always has a queue of approved patches
waiting to land, and so it can take days for even simple patches to
get through the queue.&lt;/p&gt;

&lt;p&gt;This can create an interesting competitive environment where authors
desire high spots in the queue and complain when the queue grows.&lt;/p&gt;

&lt;p&gt;While PR authors are waiting in bors&amp;rsquo;s queue, we also have a bot
test their PR in a single configuration as a smoke test. This avoids
the frustration of waiting for one&amp;rsquo;s PR to work through the queue
only to be rejected by a simple mistake.&lt;/p&gt;

&lt;p&gt;We do this style of CI not only on &lt;a href=&#34;https://github.com/rust-lang/rust&#34;&gt;rust-lang/rust&lt;/a&gt; but also on other
key projects, including &lt;a href=&#34;https://github.com/rust-lang/cargo&#34;&gt;cargo&lt;/a&gt; and &lt;a href=&#34;https://github.com/rust-lang/rustup.rs&#34;&gt;rustup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;bors&amp;rsquo;s implementation has gone through several iterations, and today
it is implemented by a script called &lt;a href=&#34;https://github.com/servo/homu&#34;&gt;homu&lt;/a&gt;, which is shared
with Rust&amp;rsquo;s sister project, &lt;a href=&#34;http://github.com/servo&#34;&gt;Servo&lt;/a&gt;. It has also inspired other
ther integration bots used in the Rust ecosystem and beyond,
including &lt;a href=&#34;https://github.com/bors-ng/bors-ng&#34;&gt;bors-ng&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Test-first CI is the cornerstone of Rust stability.&lt;/p&gt;

&lt;p&gt;Today we do our CI on &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; for Linux and Mac OS, and &lt;a href=&#34;https://www.appveyor.com/&#34;&gt;AppVeyor&lt;/a&gt;
for Windows. Notably, all of our testing hosts are running x86, and
so, for the non-x86 platforms that we do test, we currently use the
&lt;a href=&#34;https://en.wikipedia.org/wiki/QEMU&#34;&gt;QEMU&lt;/a&gt; emulator on Linux. Many non-x86 platforms do not yet get test
coverage as part of the CI process (though see the &lt;a href=&#34;#s-smoke&#34;&gt;smoke&lt;/a&gt;
project). No non-x86 platforms are automatically tested on real
hardware, a major limitation of the current setup.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-cr&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;continuous-releases&#34;&gt;Continuous releases&lt;/h2&gt;

&lt;p&gt;Since we test so thoroughly, ideally all bugs are caught before
entering the tree, but that is not the case. Once a patch enters the
tree the clock is ticking until it hits the stable release.&lt;/p&gt;

&lt;p&gt;Rust publishes releases on three &amp;ldquo;channels&amp;rdquo;: nightly, beta, and stable.
The nightly and beta channels provide an opportunity to catch bugs
missed by the official CI before they hit a release.&lt;/p&gt;

&lt;p&gt;Rust has a 6 week beta cycle, so the minimum a patch will sit in tree
before hitting a stable release is 6 weeks (if it lands on master
right before the next beta), and the maximum is 12 weeks (if it lands
at the beginning of a cycle).&lt;/p&gt;

&lt;p&gt;During the 6 week release cycle, regression triage meetings are held
every 2 weeks to keep ahead of breakage and ensure the release stays
on track. Again, the Rust release schedule is incredibly aggressive
and it takes constant vigilence to maintain.&lt;/p&gt;

&lt;p&gt;To make releases as simple as possible we tie it directly to the CI
system. Since we are already testing Rust in the same configurations
that we ship releases for, it&amp;rsquo;s a natural extension to simply produce
release artifacts while we&amp;rsquo;re testing. So we do that and publish
them to their own S3 bucket.&lt;/p&gt;

&lt;p&gt;From those binaries we have a bot that periodically collects them into
their final form for release and deploys them to static.rust-lang.org.&lt;/p&gt;

&lt;p&gt;So not only do we fully test every commit that lands on master, we
also publish the complete release binaries at the same time.&lt;/p&gt;

&lt;p&gt;With as many release configurations as Rust has, differences between
the continuous integration configuration and the release build
configuration became a huge source of problems. Making testing and
releasing the same thing eliminated them.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-ts&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-rust-test-suite&#34;&gt;The Rust test suite&lt;/h2&gt;

&lt;p&gt;The Rust test suite covers rustc, std, cargo, rustdoc, and the Rust
documentation, and features a number of special test harnesses to
cover specific classes of bugs relevant to Rust.&lt;/p&gt;

&lt;p&gt;The tests are all ultimately run by &lt;a href=&#34;https://github.com/rust-lang/rust/tree/37849a002ed91ac2b80aeb2172364b4e19250e05/src/libtest&#34;&gt;libtest&lt;/a&gt;, the standard test
crate, and many of them are coordinated by the &lt;a href=&#34;https://github.com/rust-lang/rust/tree/37849a002ed91ac2b80aeb2172364b4e19250e05/src/tools/compiletest&#34;&gt;compiletest&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;As of 2017/07/10 there are a little over 6k tests in the Rust test
suite. This may seem surprisingly few, but keep in mind that Rust&amp;rsquo;s
strong static typing prevents many errors at compile-time, so Rust
projects in general are believed to require fewer test cases than
projects in other languages. All features and bug fixes are
accompanied by test cases. Still, test coverage is currently unknown,
and assumed to be far from complete.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-ut&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;unit-tests&#34;&gt;Unit tests&lt;/h3&gt;

&lt;p&gt;Standard Rust unit tests, like any Rust author would write. These are
tests annotated with &lt;code&gt;#[test]&lt;/code&gt; and run with &lt;code&gt;cargo test&lt;/code&gt;. This is the
primary method for testing the standard library, and for cargo as
well.&lt;/p&gt;

&lt;p&gt;This is the most basic kind of testing in Rust, but the compiler
itself is mostly tested with more specialized tools.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-ct&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;compiletest&#34;&gt;compiletest&lt;/h3&gt;

&lt;p&gt;compiletest is the main test harness of the Rust test suite, one of
the oldest Rust codebases, and the oldest parallel Rust program. It
implements a number of classes of test, each of which generally
corresponds to a directory under &lt;a href=&#34;https://github.com/rust-lang/rust/tree/37849a002ed91ac2b80aeb2172364b4e19250e05/src/test&#34;&gt;&lt;code&gt;src/test&lt;/code&gt;&lt;/a&gt;. Most of these tests
involve driving the compiler to compile one or more source programs,
then interpreting the results.&lt;/p&gt;

&lt;p&gt;Most tests are represented by a Rust source file that may have
annotations in comments directing compiletest in how to run the test,
as in the following run-fail test, &lt;code&gt;test-panic.rs&lt;/code&gt;, that tells
compiletest that the string &amp;ldquo;thread &amp;lsquo;test_foo&amp;rsquo; panicked at&amp;rdquo; must be
printed to stdout, to compile with the &lt;code&gt;--test&lt;/code&gt; flag, and to ignore
the test on emscripten.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// check-stdout&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// error-pattern:thread &amp;#39;test_foo&amp;#39; panicked at&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// compile-flags: --test&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ignore-emscripten&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#[test]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test_foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most of the test types in the following sections are implemented
by compiletest.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-rpf&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;run-pass-and-run-fail&#34;&gt;run-pass and run-fail&lt;/h3&gt;

&lt;p&gt;Two of the oldest and simplest types of test. These test cases are
Rust source code that should compile successfully. run-pass tests must
run successfully; run-fail tests must run and return the Rust standard
error code, 101.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-cf&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;compile-fail&#34;&gt;compile-fail&lt;/h3&gt;

&lt;p&gt;compile-fail tests are some of the most common tests for testing
language features. They must fail to compile, and stderr must
emit errors containing specific text:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//~ ERROR invalid left-hand side expression&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//~ ERROR invalid left-hand side expression&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//~ ERROR invalid left-hand side expression&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//~ ERROR invalid left-hand side expression&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;None&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Some&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//~ ERROR invalid left-hand side expression&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While these are the bread and butter of rustc testing, their weakness
is that they only validate some of the text output to stderr - they do
not guarantee that the output actually looks good. For that reason new
tests, or tests of tricky error output, are often written as &amp;lsquo;ui&amp;rsquo;
tests.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-ui&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ui&#34;&gt;ui&lt;/h3&gt;

&lt;p&gt;UI tests are like compile-fail tests, but the output of stdout and
stderr are checked fully. In these tests, instead of annotating the
source with expected output, source files are accompanied by
&lt;code&gt;*.stdout&lt;/code&gt; and &lt;code&gt;*.stderr&lt;/code&gt; templates that capture expactly what the
compiler is allowed to output.&lt;/p&gt;

&lt;p&gt;So the test &lt;code&gt;issue-39544.rs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;must have the output from &lt;code&gt;issue-39544.stderr&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cannot&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;borrow&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;immutable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutable&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;$DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;issue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;39544.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mut&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;                  &lt;span class=&#34;o&#34;&gt;^^^&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aborting&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;due&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;previous&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because these templates are difficult to write by hand, there are
scripts to help keep them updated when the output changes.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-rm&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;run-make&#34;&gt;run-make&lt;/h3&gt;

&lt;p&gt;This is the kind of test you write when none of the other tests
are sufficient. compiletest simply runs a Makefile, while setting
up a bunch of environment variables that might be useful. Tests
import &lt;a href=&#34;https://github.com/rust-lang/rust/blob/37849a002ed91ac2b80aeb2172364b4e19250e05/src/test/run-make/tools.mk&#34;&gt;tools.mk&lt;/a&gt; to get access to various helpers.&lt;/p&gt;

&lt;p&gt;These tests are usually testing the behavior of rustc, like in this
test that is validating something related to target specs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span class=&#34;cp&#34;&gt;-include ../tools.mk&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RUSTC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; foo.rs --target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my-awesome-platform.json --crate-type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;lib --emit&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;asm
	grep -q -v morestack &amp;lt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;TMPDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/foo.s
	&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RUSTC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; foo.rs --target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my-invalid-platform.json 2&amp;gt;&amp;amp;1 | grep -q &lt;span class=&#34;s2&#34;&gt;&amp;quot;Error loading target specification&amp;quot;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RUSTC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; foo.rs --target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my-incomplete-platform.json 2&amp;gt;&amp;amp;1 | grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;Field llvm-target&amp;#39;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;RUST_TARGET_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;. &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RUSTC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; foo.rs --target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my-awesome-platform --crate-type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;lib --emit&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;asm
	&lt;span class=&#34;nv&#34;&gt;RUST_TARGET_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;. &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RUSTC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; foo.rs --target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;x86_64-unknown-linux-gnu --crate-type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;lib --emit&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;asm
	&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RUSTC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -Z unstable-options --target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my-awesome-platform.json --print target-spec-json &amp;gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;TMPDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/test-platform.json &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RUSTC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -Z unstable-options --target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;TMPDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/test-platform.json --print target-spec-json | diff -q &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;TMPDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/test-platform.json -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;s-cg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;codegen&#34;&gt;codegen&lt;/h3&gt;

&lt;p&gt;codegen tests verify that rustc produces the expected LLVM IR for a given file.
It is similar to tests used by LLVM to verify its own lowering to assembly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// compile-flags: -C no-prepopulate-passes&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crate_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// CHECK-LABEL: @exhaustive_match&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exhaustive_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// CHECK: switch{{.*}}, label %[[DEFAULT:[a-zA-Z0-9_]+]]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// CHECK: [[DEFAULT]]:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// CHECK-NEXT: unreachable&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;s-cgu&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;codegen-units&#34;&gt;codegen-units&lt;/h3&gt;

&lt;p&gt;Like codegen tests these tests are validating the internal compiler
behavior, in this case testing how items in Rust source are
partitioned between &amp;ldquo;codegen units&amp;rdquo; at translation time. Correctly
subdividing the work of translating Rust to LLVM and then machine code
is required for incremental translation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// compile-flags:-Zprint-trans-items=eager&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//~ TRANS_ITEM fn static_init::foo[0]&amp;lt;i32&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//~ TRANS_ITEM static static_init::FN[0]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//~ TRANS_ITEM fn static_init::main[0]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//~ TRANS_ITEM drop-glue i8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;s-p&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pretty&#34;&gt;pretty&lt;/h3&gt;

&lt;p&gt;pretty tests are testing rustc&amp;rsquo;s &amp;ldquo;pretty printer&amp;rdquo;, the code that
converts the Rust AST back to Rust syntax. Rust uses the pretty
printer for displaying error messages.&lt;/p&gt;

&lt;p&gt;pretty testing is done by asking the compiler to pretty-print source
code, then asking it to pretty-print &lt;em&gt;that&lt;/em&gt; source code, and testing
that it reaches a steady state, where further pretty-printing produces
the same source, and that it still works.&lt;/p&gt;

&lt;p&gt;Historically, rustc has run pretty testing over the entire codebase,
but as the pretty-printer matured, pretty testing was reduced to a
subset of the full tree.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-dbg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;debuginfo&#34;&gt;debuginfo&lt;/h3&gt;

&lt;p&gt;The problem of getting debuggers to understand the compiler&amp;rsquo;s output
is nearly as difficult as just getting the compiler to work in the
first place. Debuggers are so complicated. These tests drive gdb and
lldb to verify they work with the given Rust program.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple example from &lt;code&gt;cross-crate-spans.rs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;omit_gdb_pretty_printer_section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;omit_gdb_pretty_printer_section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// min-lldb-version: 310&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// aux-build:cross_crate_spans.rs&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cross_crate_spans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// compile-flags:-g&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// === GDB TESTS ===================================================================================&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// gdb-command:break cross_crate_spans.rs:24&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-command:run&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// gdb-command:print result&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdbg-check:$1 = {__0 = 17, __1 = 17}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdbr-check:$1 = (17, 17)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-command:print a_variable&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-check:$2 = 123456789&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-command:print another_variable&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-check:$3 = 123456789.5&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-command:continue&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// gdb-command:print result&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdbg-check:$4 = {__0 = 1212, __1 = 1212}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdbr-check:$4 = (1212, 1212)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-command:print a_variable&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-check:$5 = 123456789&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-command:print another_variable&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-check:$6 = 123456789.5&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// gdb-command:continue&lt;/span&gt;



&lt;span class=&#34;c1&#34;&gt;// === LLDB TESTS ==================================================================================&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// lldb-command:b cross_crate_spans.rs:24&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-command:run&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// lldb-command:print result&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-check:[...]$0 = (17, 17)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-command:print a_variable&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-check:[...]$1 = 123456789&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-command:print another_variable&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-check:[...]$2 = 123456789.5&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-command:continue&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// lldb-command:print result&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-check:[...]$3 = (1212, 1212)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-command:print a_variable&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-check:[...]$4 = 123456789&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-command:print another_variable&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-check:[...]$5 = 123456789.5&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lldb-command:continue&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// This test makes sure that we can break in functions inlined from other crates.&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cross_crate_spans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generic_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;u32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cross_crate_spans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generic_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1212&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;i16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;s-inc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;incremental&#34;&gt;incremental&lt;/h3&gt;

&lt;p&gt;Tests of incremental compilation, a technique rustc uses to track
within a crate which source code needs to be recompiled when any other
source code changes.&lt;/p&gt;

&lt;p&gt;In the example below, the test is run twice, first with &lt;code&gt;--cfg
rpass1&lt;/code&gt;, then again with &lt;code&gt;--cfg rpass2&lt;/code&gt;. The test instructs the
compiler to verify that the change in source code between the two
invocations results in only mod &lt;code&gt;x&lt;/code&gt; being recompiled. Other modules
are reused.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// A first &amp;quot;spike&amp;quot; for incremental compilation: here, we change the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// content of the `make` function, and we find that we can reuse the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// `y` module entirely (but not the `x` module).&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// revisions:rpass1 rpass2&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rustc_attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rustc_partition_reused&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;spike&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;rpass2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rustc_partition_translated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;spike-x&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;rpass2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rustc_partition_reused&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;spike-y&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;rpass2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;u32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;u32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cp&#34;&gt;#[cfg(rpass1)]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;cp&#34;&gt;#[cfg(rpass2)]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;u32&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assert_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;s-mir&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mir-opt&#34;&gt;mir-opt&lt;/h3&gt;

&lt;p&gt;Tests of optimizations on MIR, rustc&amp;rsquo;s internal Rust
representation. These tests check that the MIR looks as expected
before and after given optimization passes.&lt;/p&gt;

&lt;p&gt;Note that as of 2017/07/10 MIR optimizations are not enabled by
default.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;hello world!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// END RUST SOURCE&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// START rustc.node4.SimplifyBranches-initial.before.mir&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// bb0: {&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//     switchInt(const false) -&amp;gt; [0u8: bb2, otherwise: bb1];&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// }&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// END rustc.node4.SimplifyBranches-initial.before.mir&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// START rustc.node4.SimplifyBranches-initial.after.mir&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// bb0: {&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//     goto -&amp;gt; bb2;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// }&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// END rustc.node4.SimplifyBranches-initial.after.mir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;s-rd&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;rustdoc&#34;&gt;rustdoc&lt;/h3&gt;

&lt;p&gt;This set of tests verifies that the HTML output of rustdoc includes
various properties. Again, they are run by compiletest by interpreting
comments in Rust source files. They look something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crate_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;const_fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// @has const/struct.Foo.html &amp;#39;//*[@id=&amp;quot;new.v&amp;quot;]//code&amp;#39; &amp;#39;const unsafe fn new&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;s-doc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;documentation&#34;&gt;documentation&lt;/h3&gt;

&lt;p&gt;Rust uses Markdown for both API documentation and standalone
documentation. All examples in Rust documentation are tested by
rustdoc, the documentation tool.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-link&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;linkchecker&#34;&gt;linkchecker&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/rust-lang/rust/tree/37849a002ed91ac2b80aeb2172364b4e19250e05/src/tools/linkchecker&#34;&gt;linkchecker&lt;/a&gt; ensures that all internal HTML links produced by
rustdoc for the standard library documentation are valid.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-crt&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cargotest&#34;&gt;cargotest&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/tree/37849a002ed91ac2b80aeb2172364b4e19250e05/src/tools/cargotest&#34;&gt;cargotest&lt;/a&gt; is a small tool that runs the test suite of several
significant out-of-tree Rust projects. The projects are chosen to have
a wide variety of dependencies to maximize the chances of detecting
type system regressions through build failures.&lt;/p&gt;

&lt;p&gt;This suite of tests was added in anger after cargo&amp;rsquo;s own build broke
too many times due to Rust regressions.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-err&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;check-error-index&#34;&gt;check-error-index&lt;/h3&gt;

&lt;p&gt;rustc&amp;rsquo;s error messages included extended help messages that often
include examples. As with other documentation examples, these are
tested.  A special tool is used to extract them from the compiler,
convert them to markdown, and then run them through rustdoc.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-dist&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;distcheck&#34;&gt;distcheck&lt;/h3&gt;

&lt;p&gt;Every release of Rust is accompanied by a tarball containing the
source. This check verifies that that source tarball unpacks, builds
and tests as expected.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-tidy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;tidy&#34;&gt;tidy&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/rust-lang/rust/tree/37849a002ed91ac2b80aeb2172364b4e19250e05/src/tools/tidy&#34;&gt;tidy&lt;/a&gt; tool runs a variety of sanity checks that the source tree
conforms to various conventions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;bins&lt;/em&gt; - verifies that no binaries are checked in&lt;/li&gt;
&lt;li&gt;&lt;em&gt;style&lt;/em&gt; - verifies line length, no tabs, no trailing whitespace, no
CR characters, no TODO or XXX directives, and that each file
contains a license header&lt;/li&gt;
&lt;li&gt;&lt;em&gt;errors&lt;/em&gt; - verifies that rustc error codes are not duplicated&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cargo&lt;/em&gt; - verifies that crates listed in &lt;code&gt;[dependencies]&lt;/code&gt; are
actually imported as &lt;code&gt;extern crate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;features&lt;/em&gt; - verifies that various properties of Rust&amp;rsquo;s &amp;lsquo;feature&amp;rsquo;
definitions are correct&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pal&lt;/em&gt; - verifies that platform-specific code only occurs in
specific places&lt;/li&gt;
&lt;li&gt;&lt;em&gt;unstable_book&lt;/em&gt; - verifies that unstable features are represented
in the documentation&lt;/li&gt;
&lt;li&gt;&lt;em&gt;deps&lt;/em&gt; - verifies the license of third-party crate dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;s-boot&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;bootstrap&#34;&gt;bootstrap&lt;/h3&gt;

&lt;p&gt;The Rust build system (called &amp;ldquo;bootstrap&amp;rdquo;) itself is written in Rust
and has a self-check that runs before the build begins.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-tools&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;tools&#34;&gt;tools&lt;/h3&gt;

&lt;p&gt;Rust is distributed with several externally-developed tools, today
cargo and rls (the Rust Language Server). Their test suites are
included as part of the Rust test suite.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-ot&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;other-testing&#34;&gt;Other testing&lt;/h2&gt;

&lt;p&gt;All of the above sections describe the Rust test suite, which is Run
prior to landing any patch. But that is neither the beginning nor the
end of the Rust validation process. Below are yet more tools we use to
test other aspects of the Rust platform. This includes tools and
libraries Rust depends on, and the application of additional
validation to releases during their nightly and beta phases, prior to
their stable release.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-ds&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cargobomb-and-crater&#34;&gt;cargobomb and crater&lt;/h3&gt;

&lt;p&gt;In would be lovely if the Rust test suite caught all regressions.
Sadly, the authors of the test suite haven&amp;rsquo;t yet figured out how to
anticipate every way in which Rust will be used in the wild.&lt;/p&gt;

&lt;p&gt;Fortunately though, Rust has a standard testing facility that most
Rust crates use, and Rust has a standard repository of Rust crates in
crates.io. GitHub further contains repositories of Rust crates that
are not published to crates.io.&lt;/p&gt;

&lt;p&gt;These factors allow us to treat the entire world of open source Rust
code as our test suite.&lt;/p&gt;

&lt;p&gt;As new nightlies and betas are published, we use the &lt;a href=&#34;https://github.com/brson/cargobomb&#34;&gt;cargobomb&lt;/a&gt; tool
to test this corpus of Rust code (as of 2017/07/10 over 13,000 crates)
against both the stable release and a nightly or beta release,
comparing the results for regressions.&lt;/p&gt;

&lt;p&gt;This type of testing helps us find subtle changes in the type system
as crates fail to build on new releases, errors in code generation or
library behavior that cause tests to fail or crash, and logic errors
in the compiler that cause the compiler to crash.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cargobomb-reports.s3-website-us-west-1.amazonaws.com/nightly-2017-06-12/index.html&#34;&gt;Here&amp;rsquo;s an example of a cargobomb run against nightly&lt;/a&gt;.
Clicking the red &amp;ldquo;regressed&amp;rdquo; button reveals the most important
category of results: those where the build against the second
toolchain failed earlier than the first toolchain. Clicking through
the results yields the full logs. In this run, 6972 of the 13055
crates tested passed their test suites against both toolchains; 56
crates regressed; and 3985 crates failed to even build (this can be
for many reasons, but is often simply because the cargobomb
environment is not set up appropriately for the crate).&lt;/p&gt;

&lt;p&gt;As of 2017/07/10, each run of cargobomb runs over 222,000 tests, twice
over, across more than 13,000 projects.&lt;/p&gt;

&lt;p&gt;When cargbomb detects regressions, they are filed against
rust-lang/rust, and the downstream crate authors alerted to the
issue. Using the binary builds published for every successful PR, the
PR that caused the regression is quickly identified by the
&lt;a href=&#34;https://github.com/Mark-Simulacrum/bisect-rust&#34;&gt;bisect-rust&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;As cargobomb-discovered regressions are fixed, naturally test cases
capturing them are checked in to prevent those regressions occurring
again in the future.&lt;/p&gt;

&lt;p&gt;cargobomb is the successor to a similar project called &lt;a href=&#34;https://github.com/brson/taskcluster-crater&#34;&gt;crater&lt;/a&gt;, which
only checks for successful typechecking, and does not run test suites.
It is still in occasional use.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-libc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;libc&#34;&gt;libc&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/rust-lang/libc&#34;&gt;libc&lt;/a&gt; crate has a special place in the ecosystem: it defines the
FFI definitions of the C library and related systems libraries for
every platform Rust supports, and ends up used in some form by most
every Rust project. So it&amp;rsquo;s important that it be correct.&lt;/p&gt;

&lt;p&gt;But writing correct FFI bindings is not a simple thing, since one does
not have the benefit of the Rust type checker verifying the
definitions. So the libc crate has a special testing regime designed
to accomplish this verification.&lt;/p&gt;

&lt;p&gt;It uses the &lt;a href=&#34;https://github.com/alexcrichton/ctest&#34;&gt;ctest&lt;/a&gt; crate to automatically compare the libc Rust
bindings to the actual C definition.&lt;/p&gt;

&lt;p&gt;The basic process involves generating two programs, one in C, and one
in Rust, that each produce metadata about function signatures,
constant values, struct layout, alignment, and more. The Rust program
calls into the C program and then compares that both sides produce the
same metadata values.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-cb&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;compiler-builtins&#34;&gt;compiler-builtins&lt;/h3&gt;

&lt;p&gt;This touches on a little known piece of black magic in comon compiler
toolchains. One might expect that C compilers like gcc and clang
compile your code directly to machine code, but in actuality, there
are a number of constructs defined in the language which do not
necessarily correspond neatly to machine instructions, depending on
the architecture. As a consequence, nearly all C programs silently
link to a tiny runtime library to provide implementations of very low
level operations. In gcc this library is called &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html&#34;&gt;libgcc&lt;/a&gt;, and in clang
it is called &lt;a href=&#34;https://github.com/rust-lang/compiler-rt&#34;&gt;compiler-rt&lt;/a&gt;, which began essentially by
reverse-engineering libgcc.&lt;/p&gt;

&lt;p&gt;LLVM will silently lower LLVM IR to calls to functions provided by
compiler-rt, so rustc, like clang, must ensure these functions are
available.&lt;/p&gt;

&lt;p&gt;This library is implemented in a combination of assembly and C, and
has over time grown to include a variety of runtime functionality
expected by LLVM for sometimes niche features.&lt;/p&gt;

&lt;p&gt;Over the years we&amp;rsquo;ve found it quite challenging to keep compiler-rt
working on all platforms Rust (and LLVM) supports, so are in the
gradual process of reimplementing it ourselves (in Rust), in a library
called &lt;a href=&#34;https://github.com/rust-lang-nursery/compiler-builtins&#34;&gt;compiler-builtins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The compiler-builtins crate is exclusively limited to basic math
intrinsics, and does not include many of the advanced runtime features
of compiler-rt, notably the sanitizer runtimes (which in Rust we would
expect to be provided in a different crate).&lt;/p&gt;

&lt;p&gt;To verify this set of crucial low-level math functions behaves as
expected the compiler-builtin crate has its own custom testing. For
each function there is a test that generates a set of inputs to it,
and passes it to both the upstream compiler-rt, and to our own
compiler-builtins, and verifies their same output. The test suite
additionally compares the symbols exported by each to ensure our
implementation does not miss any functions.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-perf&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;perf-rust-lang-org&#34;&gt;perf.rust-lang.org&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a long-standing desire of the team to get a stronger handle on
rustc&amp;rsquo;s compile times, and to prevent them from increasing.
&lt;a href=&#34;http://perf.rust-lang.org/&#34;&gt;perf.rust-lang.org&lt;/a&gt; is a project that uses the CI builds of Rust to
build a variety of representative Rust code bases and record how long
it took, and how much memory was used. The compiler team then uses the
reporting provided by the site to identify performance regressions.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-fuzz&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fuzzing&#34;&gt;fuzzing&lt;/h3&gt;

&lt;p&gt;There are two major fuzzers for Rust: &lt;a href=&#34;https://github.com/rust-fuzz/afl.rs&#34;&gt;afl.rs&lt;/a&gt;, which uses the
&lt;a href=&#34;http://lcamtuf.coredump.cx/afl/&#34;&gt;American Fuzzy Lop&lt;/a&gt; fuzzer; and &lt;a href=&#34;https://github.com/rust-fuzz/cargo-fuzz&#34;&gt;cargo-fuzz&lt;/a&gt;, which uses LLVM&amp;rsquo;s
&lt;a href=&#34;http://llvm.org/docs/LibFuzzer.html&#34;&gt;libfuzzer&lt;/a&gt;. Both project collaborate under the &lt;a href=&#34;https://github.com/rust-fuzz&#34;&gt;Rust Fuzzing
Authority&lt;/a&gt; to improve the Rust crate ecosystem. They
maintain a &lt;a href=&#34;https://github.com/rust-fuzz/trophy-case&#34;&gt;trophy case&lt;/a&gt; of bugs discovered through their tools.
Although an important part of the Rust toolset, fuzzing Rust tends to
find fewer and less severe bugs than fuzzing software written in
memory-unsafe languages.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-icci&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;rust-icci&#34;&gt;rust-icci&lt;/h3&gt;

&lt;p&gt;The Rust compiler supports a technique called &amp;ldquo;incremental
compilation&amp;rdquo;, a process by which the compiler tracks, on a very
fine-grained level, dependencies between items in the code, to avoid
re-typechecking and re-translating fetaures that have not changed
since previous compilations. It can be thought of roughly as caching
and reusing previously translated functions. The system is extremely
complex and opportunities for errors are innumerable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rust-icci&#34;&gt;rust-icci&lt;/a&gt; is a project that does brute-force validation of Rust
incremental compilation by replaying the commit history of Rust
projects with incremental compilation activitated, and without, and
verifies that the results are the same.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-fx&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;firefox-beta-testing&#34;&gt;Firefox beta testing&lt;/h3&gt;

&lt;p&gt;One of the major initial users of Rust is the Firefox web browser,
which has integrated Rust into a number of subsystems of a large C++
codebase that supports a variety of platforms across millions of
client systems. This real-world exposure quickly began to expose
regressions in Rust, and so Firefox is &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=1337955&#34;&gt;built and tested against Rust
betas&lt;/a&gt; as they are produced, providing important feedback during
the Rust beta cycle.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-form&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formal-verification&#34;&gt;Formal verification&lt;/h3&gt;

&lt;p&gt;Ultimately we hope and expect Rust to be adopted by industries that
traditionally require strong guarantees about reliability and
correctness. These industries are conservative and slow to change, and
tend to require large accumulations of evidence of correctness; and
formal proofs provide some of the strongest such
evidence. Furthermore, having formal models of the Rust system gives
the Rust developers a framework to confidently apply advanced
optimizations to Rust that are not yet possible.&lt;/p&gt;

&lt;p&gt;The most prominent project applying formal methods to validate Rust is
the &lt;a href=&#34;http://plv.mpi-sws.org/rustbelt/&#34;&gt;Rust Belt&lt;/a&gt; project, which aims to prove the Rust type system
sound, and to develop a model for reasoning about unsafe code in Rust.
It has thus far &lt;a href=&#34;https://people.mpi-sws.org/~dreyer/papers/rustbelt/paper.pdf&#34;&gt;proven the soundness&lt;/a&gt; of the most common
abstractions in the standard library, discovering &lt;a href=&#34;https://www.ralfj.de/blog/2017/06/09/mutexguard-sync.html&#34;&gt;one soundness
bug&lt;/a&gt; in the process.&lt;/p&gt;

&lt;p&gt;Previously, Eric Reed formalized a safe subset of Rust called
&lt;a href=&#34;https://www.cs.washington.edu/tr/2015/03/UW-CSE-15-03-02.pdf&#34;&gt;Patina&lt;/a&gt;, and the &lt;a href=&#34;http://ieeexplore.ieee.org/document/7371997/&#34;&gt;CRUST&lt;/a&gt; project used bounded model checking to find
memory safety violation.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-smoke&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;smoke&#34;&gt;smoke&lt;/h3&gt;

&lt;p&gt;Many of the platforms that Rust supports, though they may be &lt;em&gt;built&lt;/em&gt;
by Rust&amp;rsquo;s CI, are not &lt;em&gt;tested&lt;/em&gt; by Rust&amp;rsquo;s CI, either because of lack of
capacity, or because it would take too long (often due to emulation).&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/japaric/smoke&#34;&gt;smoke&lt;/a&gt; project is an independent CI project to run tests against
some of these platforms using emulators.&lt;/p&gt;

&lt;p&gt;Note that as of 2017/07/10 the smoke project is bitrotted and needs to
be refreshed.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-ru&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;rustup&#34;&gt;rustup&lt;/h3&gt;

&lt;p&gt;Though not strictly a part of the Rust distribution, &lt;a href=&#34;https://github.com/rust-lang/rustup.rs&#34;&gt;rustup&lt;/a&gt; is a
critical piece of the Rust distribution infrastructure. It is the tool
that installs Rust for most Rust users. While limited in scope, in
performs important network and and file I/O that must be reliable
across all supported platforms. rustup is self-updating, and a
self-update failure would cause major disruption for Rust users.&lt;/p&gt;

&lt;p&gt;rustup&amp;rsquo;s primary functionality works by downloading a release
&amp;ldquo;manifest&amp;rdquo; from the official Rust servers, and interpreting it
to install the requested Rust releases.&lt;/p&gt;

&lt;p&gt;While its test scaffolding includes a mock distribution server, it
notably it does not contain actual network tests. In general, rustup&amp;rsquo;s
testing could be much more thorough.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-clippy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;clippy&#34;&gt;clippy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Manishearth/rust-clippy&#34;&gt;clippy&lt;/a&gt; provides additional static analysis (called &amp;ldquo;lints&amp;rdquo;) beyond
what is done by the compiler. While not distributed by the compiler,
and rarely run on the Rust codebase itself, it is widely used by the
Rust community to provide an extra level of consistency and polish, so
seems worth mentioning.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;s-f&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;notes-and-future-work&#34;&gt;Notes and future work&lt;/h2&gt;

&lt;p&gt;So Rust receives a lot of testing, but there&amp;rsquo;s more that can be
done. Here we&amp;rsquo;ll say a little bit about other possibilities. Almost
everything here would be an awesome project for an ambitious
contributor to undertake!&lt;/p&gt;

&lt;p&gt;An obvious omission is the lack of any testing with tools like
&lt;a href=&#34;http://valgrind.org/&#34;&gt;valgrind&lt;/a&gt; and &lt;a href=&#34;https://github.com/google/sanitizers&#34;&gt;address sanitizer&lt;/a&gt;. These tools are incredibly
effective at finding incorrect memory accesses by instrumenting
programs at runtime, so with Rust&amp;rsquo;s focus on memory safety one might
expect them to be employed extensively. They are not though.&lt;/p&gt;

&lt;p&gt;Valgrind was a crucial tool in Rust&amp;rsquo;s original development, back when
Rust barely worked. There were several years where the entire test
suite was required to be valgrind-clean, and it&amp;rsquo;s hard to imagine
bringing up Rust without it. At some point though &lt;a href=&#34;https://github.com/rust-lang/rust/issues/11710&#34;&gt;LLVM began doing a
valid optimization&lt;/a&gt; that valgrind was unable to recognize as valid, and
that made its application useless for us, or at least too difficult to
maintain. By that point Rust was mature and memory safe, so valgrind
testing was disabled, and eventually it bitrotted and was removed from
the tree.&lt;/p&gt;

&lt;p&gt;Unlike valgrind, address sanitizer requires the help of the compiler
to instrument binaries, and that support landed in LLVM long after
Rust had matured.&lt;/p&gt;

&lt;p&gt;Today rustc&amp;rsquo;s code generation and the abstractions in the standard
library are mature and well-trusted, and it&amp;rsquo;s rare for either of them
to create the kind of errors these tools detect, so nobody feels it a
pressing matter to reenable this kind of testing.&lt;/p&gt;

&lt;p&gt;We do not measure test coverage of the Rust compiler, and have no
conception of how well it is covered. Integration of coverage
reporting into Rust CI is an obvious and easy improvement.&lt;/p&gt;

&lt;p&gt;The Rust source tree contains a poorly-maintained definition of the
Rust language &lt;a href=&#34;https://github.com/rust-lang/rust/tree/37849a002ed91ac2b80aeb2172364b4e19250e05/src/grammar&#34;&gt;grammar&lt;/a&gt;, along with the facilities for testing that
grammar against the compiler&amp;rsquo;s production parser. These tests have
never been activated as part of Rust&amp;rsquo;s CI though and as a result the
grammar is neither complete nor authoritative.&lt;/p&gt;

&lt;p&gt;The Rust installers, of which there are several different types, are
not automatically tested, and there is a notable lack of human-driven
QA during the Rust release process. It would be greatly desirable to
automate the deployment and installation of Rust in a variety of
scenarios via a test environment prior to release.&lt;/p&gt;

&lt;p&gt;In the future we expect to develop a formal definition of Rust&amp;rsquo;s
memory model, which will define what is and isn&amp;rsquo;t allowed to be done
in unsafe blocks, and also what the compiler is allowed to do during
optimization. The memory model will be defined in such a way that Rust
code can be instrumented to validate conformance, and we will run
conformance tests across the entire ecosystem with the cargobomb tool.&lt;/p&gt;

&lt;p&gt;The Rust standard library is intended to provide a superset of the
core library API, but there is no validation that this is true, and
already there are known places where the two crates diverge in their
APIs. There should be a tool that verifies the superset relationship.&lt;/p&gt;

&lt;p&gt;Rust would probably benefit from &amp;ldquo;chaos engineering&amp;rdquo;, that is,
injecting faults into the runtime and confirming that the system
behaves as expected. Panic and error paths are little exercised and
tend to hide bugs, especially around the interaction between &lt;code&gt;unsafe&lt;/code&gt;
and unwinding. Of course the standard library is small and
well-reviewed, so the returns of such an effort may be small there,
but it would almost certainly be fruitful to apply the appoach more
broadly in the crate ecosystem.&lt;/p&gt;

&lt;p&gt;Rust crates use an interpretation of the semver versioning standard.
Among other things it defines what API changes are allowed between
releases of crates. We expect in the future to provide a tool that
crate authors can use to validate that the API changes in their
releases correspond to semver.&lt;/p&gt;

&lt;p&gt;We also expect to provide other tools to help the crate ecosystem
manage their evolution. &lt;a href=&#34;https://github.com/brson/cargo-crusader&#34;&gt;cargo-crusader&lt;/a&gt; is one such tool, though it
is not fully-realized. It runs the test suites of a crate&amp;rsquo;s reverse
dependencies (that is, the crates that depend on your crate) prior to
publishing a new version.&lt;/p&gt;

&lt;p&gt;We have no tracking of metrics around regression rates from release to
release, despite being vigilant about testing downstream crates. We
should expect in the future to be able to provide firm numbers on
known regressions per release.&lt;/p&gt;

&lt;p&gt;The cargobomb technique of testing all known Rust code in the
ecosystem is powerful, but currently limited to running crates&amp;rsquo; test
suites to detect Rust language regressions. There are other types of
analyses we would like to do in this fashion.&lt;/p&gt;

&lt;p&gt;The security of the Rust release process is crucial, and lacking.  The
possibility of the compiler being backdoored, or even the subject of a
&amp;ldquo;&lt;a href=&#34;https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf&#34;&gt;trusting trust&lt;/a&gt;&amp;rdquo; attack, is real. In the future we expect to have
reproducible builds, and reproducible releases, meaning that
third-parties can produce the exact same binary releases the Rust
project does.  With that capability we would be able to produce a
simple tool that would let others validate that any individual release
has not been compromised with code that does not originate from the
source tree; and ultimately, to validate that the entire bootstrap
chain has not been compromised by a self-replicating, &amp;ldquo;trusting trust&amp;rdquo;
-style backdoor.&lt;/p&gt;

&lt;p&gt;Along those same lines, &lt;em&gt;someday&lt;/em&gt; we would expect to have multiple
implementations of Rust to validate against the reference compiler,
and to provide further assurance against &amp;ldquo;trusting trust&amp;rdquo; via &lt;a href=&#34;https://www.dwheeler.com/trusting-trust/&#34;&gt;diverse
double compilation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;rustup should do mock testing using a self-contained http server,
whereas today its mock server is just using a filesystem mimicking the
layout of static.rust-lang.org.&lt;/p&gt;

&lt;p&gt;rustup should have a set of self-upgrade tests, run against the live
rustup release archives, and run prior to releases, that ensure that
it can self-upgrade from the original release up to the present
release.&lt;/p&gt;

&lt;!-- links --&gt;
</description>
    </item>
    
    <item>
      <title>XTerm</title>
      <link>https://systemundertest.org/xterm/</link>
      <pubDate>Thu, 28 Jul 2016 05:34:00 +0100</pubDate>
      
      <guid>https://systemundertest.org/xterm/</guid>
      <description>

&lt;style&gt;

article img {
    box-shadow: 1px 1px 6px #ccc;
    width:      100%;
    height:     auto;
    display:    block;
    margin:     20px auto;
}

article img.inline-50perc {
    float:left;
    box-shadow: 1px 1px 6px #ccc;
    width:      360px;
    height:     auto;
    display:    block;
    margin:     10px 20px;
    margin-left: 0;
}

&lt;/style&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is written for &amp;ldquo;System Under Test&amp;rdquo; blog and is a research on how XTerm project is tested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; the author of this post is not involved into a development of XTerm project. All of the following is merely a high-level report about what a curious developer can see from looking at XTerm&amp;rsquo;s source code. The author didn&amp;rsquo;t go very deep into the topic, could overlook something etc. Having that said, we always appreciate feedback from our colleagues who have advanced experience with the projects we write about, especially from the developers and maintainers.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-project-about&#34;&gt;What is the project about?&lt;/h2&gt;

&lt;p&gt;The project&amp;rsquo;s home page is located at: &lt;a href=&#34;http://invisible-island.net/xterm/&#34;&gt;http://invisible-island.net/xterm/&lt;/a&gt;, here is the description from Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;xterm is the standard terminal emulator for the X Window System.&lt;/p&gt;

&lt;p&gt;xterm originated prior to the X Window System. It was originally written as a stand-alone terminal emulator for the VAXStation 100 (VS100) by Mark Vandevoorde, a student of Jim Gettys, in the summer of 1984, when work on X started. It rapidly became clear that it would be more useful as part of X than as a standalone program, so it was retargeted to X.&lt;/p&gt;

&lt;p&gt;After many years as part of the X reference implementation, around 1996 the main line of development then shifted to XFree86 (which itself forked from X11R6.3), and it is now actively maintained by Thomas Dickey.&lt;/p&gt;

&lt;p&gt;Many xterm variants are also available. Most terminal emulators for X started as variations on xterm.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Xterm&#34;&gt;https://en.wikipedia.org/wiki/Xterm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will look at three projects: XTerm, &lt;a href=&#34;http://invisible-island.net/vttest/vttest.html&#34;&gt;Vttest&lt;/a&gt; tool and so-called &lt;a href=&#34;http://invisible-island.net/ncurses/ncurses-examples.html#synopsis&#34;&gt;ncurses test programs&lt;/a&gt;. The maintainer of all of these projects is &lt;a href=&#34;http://invisible-island.net/&#34;&gt;Thomas E. Dickey&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-tested-in-xterm&#34;&gt;What is tested in XTerm?&lt;/h2&gt;

&lt;p&gt;Using frontend-backend terminology, we may think of a terminal emulator (like XTerm or OS X Terminal) as a frontend that communicates with a backend, which is operating system, with a middleware in between: shell (like bash or zsh).&lt;/p&gt;

&lt;p&gt;Historically, the protocols for this communication between terminal&amp;rsquo;s frontend and backend evolved around usage of &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI escape codes&lt;/a&gt;, and were eventually standardized in ECMA-48/ISO 6429/ANSI X3.64 standards. The first popular video terminal to support these codes was the Digital VT100, introduced in 1978 (&lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Ability to correctly recognize and handle sufficiently large number of escape codes is a crucial part of implementation of any terminal. For example, to make &lt;code&gt;Vim&lt;/code&gt;, &lt;code&gt;man&lt;/code&gt; or command-line editing work correctly, one has to implement escape controls that are required for these programs, otherwise terminal emulator will produce malformed output (or crash).&lt;/p&gt;

&lt;p&gt;&lt;i&gt;The following example demonstrates what terminal emulator (frontend) receives from operating system (backend), after you type &lt;code&gt;vi&lt;/code&gt; and then press &amp;ldquo;Enter&amp;rdquo; in OS X Terminal. Terminal emulator has to interpret these codes and react on them accordingly.&lt;/i&gt;&lt;/p&gt;


&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;How Vim is rendered&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
&lt;img class=&#34;inline-50perc&#34; src=&#34;https://systemundertest.org/img/sut_xterm/terminal_vim_log.png&#34;/&gt;
&lt;img class=&#34;inline-50perc&#34; src=&#34;https://systemundertest.org/img/sut_xterm/terminal_vim.png&#34;/&gt;
&lt;i&gt;In a real world, ESC character (ASCII decimal 27/hex 0x1B/octal 033) is not printable. It is manually substituted in the log trace (left image) to be human-readable as &#34;ESC&#34;.&lt;/i&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One of the key features of XTerm is that it supports most of the control sequences ever available for terminal emulators:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;XTerm provides DEC VT102/VT220 and selected features from higher-level terminals such as VT320/VT420/VT520 (VTxxx). It also provides Tektronix 4014 emulation for programs that cannot use the window system directly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://invisible-island.net/xterm/xterm.faq.html#what_is_it&#34;&gt;http://invisible-island.net/xterm/xterm.faq.html#what_is_it&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to &lt;a href=&#34;http://invisible-island.net/xterm/xterm.faq.html#compare_versions&#34;&gt;Comparing versions, by counting controls&lt;/a&gt;, XTerm implements at least twice as many of escape codes as any of well-known terminals: rxvt, putty, konsole, vte and some others, and at this point one may really wonder how all of this functionality is tested by XTerm&amp;rsquo;s developer.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;h3 id=&#34;getting-xterm&#34;&gt;Getting XTerm&lt;/h3&gt;

&lt;p&gt;If you want to run XTerm on Mac OS X, you have to have &lt;a href=&#34;https://www.xquartz.org/&#34;&gt;XQuartz&lt;/a&gt; installed.&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&#34;http://invisible-island.net/xterm/#download&#34;&gt;project&amp;rsquo;s page, Download section&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://invisible-island.net/xterm/xterm.tar.gz
tar xzvf xterm.tar.gz
cd xterm-325
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;./configure --prefix=$(pwd)/Build/ --enable-trace
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to run xterm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./Build/bin/xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Passing &lt;code&gt;--enable-trace&lt;/code&gt; enables tracing functions: when you run &lt;code&gt;xterm&lt;/code&gt; two files are created: &lt;code&gt;Trace-child.out&lt;/code&gt; and &lt;code&gt;Trace-parent.out&lt;/code&gt;, where &lt;code&gt;xterm&lt;/code&gt; writes debug information. Enabling this flag is not relevant for this post, but can be interesting for someone who wants to look behind the scenes and see what information is relevant to a developer of XTerm.&lt;/p&gt;

&lt;h3 id=&#34;getting-vttest&#34;&gt;Getting Vttest&lt;/h3&gt;

&lt;p&gt;Vttest&amp;rsquo;s source code is located at: &lt;a href=&#34;http://invisible-island.net/vttest/:&#34;&gt;http://invisible-island.net/vttest/:&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://invisible-island.net/vttest/vttest.tar.gz
tar xzvf vttest.tar.gz
cd vttest-20140305
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;./configure --prefix=$(pwd)/Build
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./Build/bin/vttest
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-ncurses-test-programs&#34;&gt;Getting ncurses test programs&lt;/h3&gt;

&lt;p&gt;From &lt;a href=&#34;http://invisible-island.net/ncurses/ncurses-examples.html:&#34;&gt;http://invisible-island.net/ncurses/ncurses-examples.html:&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://invisible-island.net/ncurses-examples/current/ncurses-examples.tar.gz
tar xzvf ncurses-examples.tar.gz
cd ncurses-examples-20160709
./configure
make
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-groups-of-tests&#34;&gt;3 groups of tests&lt;/h2&gt;

&lt;p&gt;Exploration of &lt;code&gt;XTerm&lt;/code&gt;, &lt;code&gt;vttest&lt;/code&gt; and &lt;code&gt;ncurses test programs&lt;/code&gt; reveals three corresponding groups of tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;vttests/*&lt;/code&gt; in XTerm&amp;rsquo;s source tree: test scripts written in Perl and Bash&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vttest&lt;/code&gt; program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ncurses test programs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These groups are independent from each other however they all share the same approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;All three groups are visual and manual tests.&lt;/strong&gt; This means that to verify them, developer has to run these tests (including tests inside &lt;code&gt;vttest&lt;/code&gt; program) manually and look for discrepancies between expected visual output and real visual output produced by terminal emulator that is under test.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All of these tests have to be run from inside terminal emulator that is being tested.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xterm-vttests&#34;&gt;XTerm/vttests/*&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l
-rwxr-xr-x@ 1 Stanislaw  staff  3434 Dec 11  2011 16colors.sh
-rwxr-xr-x@ 1 Stanislaw  staff  2083 Feb 26  2014 256colors.pl
-rwxr-xr-x@ 1 Stanislaw  staff  5043 Feb 26  2014 256colors2.pl
-rwxr-xr-x@ 1 Stanislaw  staff  1947 Feb 26  2014 88colors.pl
-rwxr-xr-x@ 1 Stanislaw  staff  5105 Feb 26  2014 88colors2.pl
-rwxr-xr-x@ 1 Stanislaw  staff  3118 Dec 11  2011 8colors.sh
-rwxr-xr-x@ 1 Stanislaw  staff  2942 Dec 11  2011 acolors.sh
-rwxr-xr-x@ 1 Stanislaw  staff  3429 Dec 11  2011 doublechars.sh
-rwxr-xr-x@ 1 Stanislaw  staff  3412 Feb 26  2014 dynamic.pl
-rwxr-xr-x@ 1 Stanislaw  staff  2711 Dec 11  2011 dynamic.sh
-rwxr-xr-x@ 1 Stanislaw  staff  3359 Dec 11  2011 dynamic2.sh
-rwxr-xr-x@ 1 Stanislaw  staff  2661 Aug 10  2015 fonts.sh
-rwxr-xr-x@ 1 Stanislaw  staff  4841 Dec 28  2014 paste64.pl
-rwxr-xr-x@ 1 Stanislaw  staff  4313 Feb 26  2014 query-color.pl
-rwxr-xr-x@ 1 Stanislaw  staff  4713 Feb 26  2014 query-fonts.pl
-rwxr-xr-x@ 1 Stanislaw  staff  3669 Oct  7  2014 resize.pl
-rwxr-xr-x@ 1 Stanislaw  staff  3203 Dec 11  2011 resize.sh
-rwxr-xr-x@ 1 Stanislaw  staff  8263 Feb 26  2014 tcapquery.pl
-rwxr-xr-x@ 1 Stanislaw  staff  2850 Dec 11  2011 title.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-vttests-colors16-sh&#34;&gt;Example: ./vttests/colors16.sh&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/xterm_vttests_001_Colors16.gif&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-vttests-dynamic2-sh&#34;&gt;Example: ./vttests/dynamic2.sh&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/xterm_vttests_002_Dynamic2.gif&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-vttests-resize-sh&#34;&gt;Example: ./vttests/resize.sh&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/xterm_vttests_003_Resize.gif&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;vttest&#34;&gt;Vttest&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vttest tests the compatibility (demonstrates the non-compatibility) of so-called &amp;ldquo;VT100-compatible&amp;rdquo; terminals.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://invisible-island.net/vttest/vttest.html&#34;&gt;http://invisible-island.net/vttest/vttest.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vttest is an application which is used to demonstrate features of VT100 and related terminals, or emulations thereof, such as xterm. The program was originally written in 1986 by Per Lindberg. It has been maintained and extended since 1996 by Thomas Dickey, to test and demonstrate features of xterm.
&lt;a href=&#34;https://en.wikipedia.org/wiki/Vttest&#34;&gt;https://en.wikipedia.org/wiki/Vttest&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This program should be run inside a terminal program under test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_001_welcome.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;I have run &lt;code&gt;vttest&lt;/code&gt; in three terminals: XTerm, &lt;a href=&#34;http://www.apple.com/osx/apps/&#34;&gt;Terminal.app&lt;/a&gt; (default terminal of OS X) and &lt;a href=&#34;https://github.com/gnachman/iTerm2&#34;&gt;iTerm2&lt;/a&gt; (well-known open-source terminal emulator for OS X).&lt;/p&gt;

&lt;p&gt;On the following screenshots XTerm has white background - it always demonstrates correct expected behavior in &lt;code&gt;vttest&lt;/code&gt;. Terminal.app and iTerm2 have black background and sometimes diverge from expected by the test cases, they are hidden by default and can be expanded.&lt;/p&gt;

&lt;h3 id=&#34;example-cursor-movements&#34;&gt;Example: cursor movements&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_002_screen_should_be_cleared_xterm.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;Terminal.app&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_002_screen_should_be_cleared_nsterm.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;iTerm2&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_002_screen_should_be_cleared_iterm2.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;example-autowrap-mixing-control-and-print-characters&#34;&gt;Example: autowrap, mixing control and print characters.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_003_autowrap_xterm.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;Terminal.app&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_003_autowrap_nsterm.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;iTerm2&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_003_autowrap_iterm2.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;example-wrap-around-mode-setting&#34;&gt;Example: WRAP AROUND mode setting&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_004_wrap_around_xterm.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;Terminal.app&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_004_wrap_around_nsterm.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;iTerm2&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_004_wrap_around_iterm2.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;example-origin-mode-test&#34;&gt;Example: origin mode test&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_005_origin_mode_xterm.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;Terminal.app&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_005_origin_mode_nsterm.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;iTerm2&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;https://systemundertest.org/img/sut_xterm/vttest_005_origin_mode_iterm2.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/p&gt;

&lt;h2 id=&#34;ncurses-test-programs&#34;&gt;ncurses test programs&lt;/h2&gt;

&lt;p&gt;ncurses test programs are part of &lt;a href=&#34;http://invisible-island.net/ncurses/&#34;&gt;ncurses&lt;/a&gt; source tree. However, they have a separate project page: &lt;a href=&#34;http://invisible-island.net/ncurses/ncurses-examples.html&#34;&gt;ncurses test programs&lt;/a&gt; and can be also obtained in a separate tar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ncurses test programs are used both for testing/demonstrating features of ncurses, as well as for occasional comparisons with other curses implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To understand what is tested here is definition of ncurses:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ncurses (new curses) is a programming library providing an application programming interface (API) that allows the programmer to write text-based user interfaces in a terminal-independent manner. It is a toolkit for developing &amp;ldquo;GUI-like&amp;rdquo; application software that runs under a terminal emulator. It also optimizes screen changes, in order to reduce the latency experienced when using remote shells.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Strictly speaking, System Under Test for these programs is &lt;code&gt;ncurses&lt;/code&gt;, not &lt;code&gt;XTerm&lt;/code&gt;, however running these programs from a terminal-emulator-under-test can give a large amount of additional testing information for &lt;code&gt;XTerm&lt;/code&gt; especially because the maintainer of both &lt;code&gt;ncurses&lt;/code&gt; and &lt;code&gt;XTerm&lt;/code&gt; is the same person.&lt;/p&gt;

&lt;p&gt;Excerpt from README:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The programs in this directory are used to test and demonstrate ncurses.
Some are interesting in themselves, while others merely show how some of
the library calls are used.  Some date back to the initial releases of
ncurses during the mid-1990s, such as:

    blue       - Blue Moon, a nifty solitaire (uses color)
    bs.c       - the game of Battleships (uses color)
    firework.c - multi-colored fireworks (uses color)
    gdc.c      - Great Digital Clock (uses color)
    hanoi.c    - the game of hanoi (uses color essentially)
    knight.c   - the game of Knight&#39;s Tour (uses color)
    lrtest.c   - test of access to the lower-right corner
    ncurses.c  - multi-test program (uses color)
    newdemo.c  - another test from PDCurses (uses color)
    rain.c     - rain drops keep falling on my head...
    tclock.c   - analog/digital clock
    testcurs.c - a test from the PDCurses people (uses color)
    tracemunch - Perl script to make trace scripts easier to read
    worm.c     - worms run all over your screen (uses color)
    xmas.c     - Xmas greeting card
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-worm&#34;&gt;Example: Worm&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/ncurses-test-programs-001-worm.gif&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-great-digital-clock&#34;&gt;Example: Great digital clock&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/ncurses-test-programs-002-gdc.gif&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-xmas-greeting-card&#34;&gt;Example: Xmas greeting card&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_xterm/ncurses-test-programs-003-xmas.gif&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;XTerm has 3 groups of tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perl/bash test scripts in XTerm&amp;rsquo;s tree&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vttest&lt;/code&gt; program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ncurses test programs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Vttest&lt;/code&gt; and &lt;code&gt;ncurses test programs&lt;/code&gt; can be used to test any terminal emulator, however their main system-under-test is XTerm.&lt;/p&gt;

&lt;p&gt;All of 3 test groups are &lt;strong&gt;manual&lt;/strong&gt;, &lt;strong&gt;visual&lt;/strong&gt; tests that have to be run from terminal emulator which is under test. Developer has to run these tests manually to compare expected visual output with actual visual output and look for discrepancies.&lt;/p&gt;

&lt;h2 id=&#34;more-about-testing-in-system-under-test-blog&#34;&gt;More about testing in System Under Test blog&lt;/h2&gt;

&lt;p&gt;If you want to see some tool or project covered in this blog, or if you want to contribute a post about some tool or project - let us know: &lt;a href=&#34;mailto:contact@systemundertest.org&#34;&gt;contact@systemundertest.org&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GNU Make</title>
      <link>https://systemundertest.org/gnu-make/</link>
      <pubDate>Sun, 12 Jun 2016 21:05:00 +0200</pubDate>
      
      <guid>https://systemundertest.org/gnu-make/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; the author of this post is not involved into a development of GNU Make project. All of the following is merely a high-level report about what a curious developer can see from looking at GNU Make&amp;rsquo;s source code. The author didn&amp;rsquo;t go very deep into the topic, could overlook something etc. Having that said, we always appreciate feedback from our colleagues who have advanced experience with the projects we write about, especially from the developers and maintainers.&lt;/p&gt;

&lt;h3 id=&#34;getting-gnu-make-s-sources&#34;&gt;Getting GNU Make&amp;rsquo;s sources&lt;/h3&gt;

&lt;p&gt;GNU Make&amp;rsquo;s source code is available from git repository and can be found 2 links away from the Make&amp;rsquo;s main home page: &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Development&lt;/p&gt;

&lt;p&gt;For development sources, issue trackers, and other information, please see the Make project page at savannah.gnu.org.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On &lt;a href=&#34;http://savannah.gnu.org/projects/make&#34;&gt;Make&amp;rsquo;s Savannah&amp;rsquo;s page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://savannah.gnu.org/git/?group=make&#34;&gt;Git Source Code Manager: Git Repository&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get Make&amp;rsquo;s sources:&lt;/p&gt;

&lt;pre&gt;
git clone git://git.savannah.gnu.org/make.git GNUMake
cd make
&lt;/pre&gt;

&lt;h3 id=&#34;good-news-make-has-tests&#34;&gt;Good news: Make has tests&lt;/h3&gt;

&lt;pre&gt;
$ ls -l tests/
total 376
-rw-r--r--   1 Stanislaw  staff  35147 May 27 20:54 COPYING
-rw-r--r--   1 Stanislaw  staff  48828 May 27 20:54 ChangeLog.1
-rw-r--r--   1 Stanislaw  staff   6765 May 27 20:54 NEWS
-rw-r--r--   1 Stanislaw  staff   4677 May 27 20:54 README
-rw-r--r--   1 Stanislaw  staff    470 May 27 20:54 config-flags.pm.in
-rwxr-xr-x   1 Stanislaw  staff   1705 May 27 20:54 config_flags_pm.com
-rw-r--r--   1 Stanislaw  staff    359 May 27 20:54 guile.supp
-rwxr-xr-x   1 Stanislaw  staff   1424 May 27 20:54 mkshadow
-rwxr-xr-x   1 Stanislaw  staff     36 May 27 20:54 run_make_tests
-rwxr-xr-x   1 Stanislaw  staff   8330 May 27 20:54 run_make_tests.com
-rw-r--r--   1 Stanislaw  staff  14179 May 27 20:54 run_make_tests.pl
drwxr-xr-x  10 Stanislaw  staff    340 May 27 20:54 scripts
-rw-r--r--   1 Stanislaw  staff  40197 May 27 20:54 test_driver.pl
&lt;/pre&gt;

&lt;p&gt;The actual tests are located in &lt;code&gt;tests/scripts&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;
$ ls -l tests/scripts
total 8
drwxr-xr-x  40 Stanislaw  staff  1360 Jun  2 21:47 features
drwxr-xr-x  31 Stanislaw  staff  1054 May 27 20:54 functions
drwxr-xr-x  10 Stanislaw  staff   340 May 27 20:54 misc
drwxr-xr-x  18 Stanislaw  staff   612 May 29 10:22 options
drwxr-xr-x  12 Stanislaw  staff   408 Jun 10 20:42 targets
-rw-r--r--   1 Stanislaw  staff  1015 May 27 20:54 test_template
drwxr-xr-x  22 Stanislaw  staff   748 May 27 20:54 variables
drwxr-xr-x   3 Stanislaw  staff   102 May 27 20:54 vms
&lt;/pre&gt;

&lt;p&gt;The following are interesting notes I found before running the tests.&lt;/p&gt;

&lt;h4 id=&#34;the-oldest-update-in-news-file-dates-back-to-1992&#34;&gt;The oldest update in NEWS file dates back to 1992&lt;/h4&gt;

&lt;pre&gt;
Changes from 0.1 to 0.2 (5-4-92):

README corrected to require perl 4.019, not 4.010.

-make_path replaces -old.

errors_in_commands test updated for change in format introduced in
make 3.62.6.

test_driver_core now uses a better way of figuring what OS it is
running on (thanks to meyering@cs.utexas.edu (Jim Meyering) for
suggesting this, as well as discovering the hard way that the old
way (testing for /mnt) fails on his machine).

Some new tests were added.
&lt;/pre&gt;

&lt;p&gt;This means that &lt;strong&gt;tests in Make were introduced as early as of 1992!&lt;/strong&gt; which is a very good sign given some other tools are likely to not have a good coverage even in present days as described in another article of this series: &lt;a href=&#34;http://systemundertest.org/freebsd&#34;&gt;System Under Test: FreeBSD&lt;/a&gt; (see Conclusion there).&lt;/p&gt;

&lt;h4 id=&#34;the-test-suite-requires-perl-and-can-be-run-on-unix-windows-and-dos-systems&#34;&gt;The test suite requires Perl and can be run on UNIX, Windows and DOS systems&lt;/h4&gt;

&lt;pre&gt;
To run the test suite on a UNIX system, use &#34;perl ./run_make_tests&#34;
(or just &#34;./run_make_tests&#34; if you have a perl on your PATH).

To run the test suite on Windows NT or DOS systems, use
&#34;perl.exe ./run_make-tests.pl&#34;.
&lt;/pre&gt;

&lt;h4 id=&#34;the-test-suite-is-run-against-make-executable&#34;&gt;The test suite is run against Make executable&lt;/h4&gt;

&lt;pre&gt;
By default, the test engine picks up the first executable called &#34;make&#34;
that it finds in your path.  You may use the -make_path option (i.e.,
&#34;perl run_make_tests -make_path /usr/local/src/make-3.78/make&#34;) if
you want to run a particular copy.  This now works correctly with
relative paths and when make is called something other than &#34;make&#34; (like
&#34;gmake&#34;).
&lt;/pre&gt;

&lt;p&gt;This observation leads us to conclusion that these &lt;strong&gt;GNU Make&amp;rsquo;s tests are actually integration tests&lt;/strong&gt; - it is the final &lt;code&gt;make&lt;/code&gt; executable that is tested, not its parts like they would be with unit testing (depending on terminology this kind of testing of a final product can also be called functional or acceptance testing).&lt;/p&gt;

&lt;h4 id=&#34;build-artefacts&#34;&gt;Build artefacts&lt;/h4&gt;

&lt;pre&gt;
A directory named &#34;work&#34; will be created when the tests are run which
will contain any makefiles and &#34;diff&#34; files of tests that fail so that
you may look at them afterward to see the output of make and the
expected result.
&lt;/pre&gt;

&lt;h3 id=&#34;running-tests-against-default-osx-make&#34;&gt;Running tests against default OSX Make&lt;/h3&gt;

&lt;p&gt;Having read both documents: &lt;code&gt;tests/NEWS&lt;/code&gt; and &lt;code&gt;tests/README&lt;/code&gt; let&amp;rsquo;s try to run the tests. As we learned earlier, by default the test suite will pick up first &lt;code&gt;make&lt;/code&gt; from path so it will default to default make of OSX system which is on my machine:&lt;/p&gt;

&lt;pre&gt;
make -v
GNU Make 3.81
Copyright (C) 2006  Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

This program built for i386-apple-darwin11.3.0
&lt;/pre&gt;

&lt;p&gt;If you ever wondered why default &lt;code&gt;make&lt;/code&gt; on OS X is so old, you are in good company - see &lt;a href=&#34;https://www.quora.com/What-is-the-reason-for-some-of-the-Linux-tools-on-OS-X-being-so-old-Is-this-related-to-GPL-licensing&#34;&gt;What is the reason for some of the Linux tools on OS X being so old? Is this related to GPL licensing?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To run tests:&lt;/p&gt;

&lt;pre&gt;
$ cd tests/
$ # The following has to be done otherwise script will complain with:
$ # &#34;Can&#39;t locate config-flags.pm in @INC...&#34;
$ cp config-flags.pm.in config-flags.pm
$ ./run_make_tests
...
output with lots of errors and finally:
212 Tests in 66 Categories Failed (See .diff* files in work dir for details) :-(
&lt;/pre&gt;

&lt;p&gt;We see here that oldness of default Make on OS X does cost 212 failing tests. I assume that the reason why most of these failing tests are failing is not a regression in core functionality of Make but rather because of new features were added to GNU Make since 2006.&lt;/p&gt;

&lt;p&gt;To understand how that is different for latest Make let&amp;rsquo;s build it from source and run tests against it.&lt;/p&gt;

&lt;h3 id=&#34;running-tests-against-latest-make-built-from-source&#34;&gt;Running tests against latest Make built from source&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s get back from &lt;code&gt;tests&lt;/code&gt; directory one level up to the root directory of source tree. Inspired by the instructions in INSTALL and after some additional googling we need to run &lt;code&gt;autoreconf&lt;/code&gt; so that it creates proper &lt;code&gt;configure&lt;/code&gt; script for us:&lt;/p&gt;

&lt;pre&gt;
$ pwd # /Users/Stanislaw/Projects/GNUMake
$ brew install automake
$ # gettext is needed by autoreconf to locate gettext,
$ # be careful with force linking it on your system.
$ brew install gettext
$ brew link gettext --force
$ autoreconf # creates &#39;configure&#39; script
&lt;/pre&gt;

&lt;p&gt;Then we want to run this newly created script with &lt;code&gt;--prefix&lt;/code&gt; parameter so that it will not install make to the &lt;code&gt;/usr/local/bin&lt;/code&gt; directory but rather to &lt;code&gt;./Build&lt;/code&gt; directory (to not conflict with OSX&amp;rsquo;s Make which we don&amp;rsquo;t want within the scope of this post).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;./configure --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/Build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point if you run &lt;code&gt;make&lt;/code&gt; the very first time you will likely see errors about some localization files missing:&lt;/p&gt;

&lt;pre&gt;
Making all in doc
Updating ./version.texi
make[2]: *** No rule to make target `fdl.texi&#39;, needed by `make.info&#39;.  Stop.
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2
&lt;/pre&gt;

&lt;p&gt;To fix that you have to first run (solution found at &lt;a href=&#34;http://gnu-make.2324884.n4.nabble.com/NLS-related-failure-when-building-make-from-CVS-tp2157p2158.html&#34;&gt;GNU Make forums&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything should work fine since then, finally we run:&lt;/p&gt;

&lt;pre&gt;
$ make &amp;&amp; make install
...
  /usr/bin/install -c make &#39;/Users/Stanislaw/Projects/Make/GNUMake/Build/bin&#39;
...
$ ./Build/bin/make --version
GNU Make 4.2
Built for x86_64-apple-darwin15.3.0
Copyright (C) 1988-2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
&lt;/pre&gt;

&lt;p&gt;Which is 2006&amp;rsquo;s Make 3.81 that has just been used to build 2016&amp;rsquo;s Make 4.2!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run the tests!&lt;/p&gt;

&lt;pre&gt;
$ cd tests
$ ./run_make_tests -make ../Build/bin/make
&lt;/pre&gt;

&lt;p&gt;The results are quite pleasant to look at - &lt;strong&gt;GNU Make built from latest source code on Mac OS X machine, passes all of its tests&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;581 Tests in 118 Categories Complete ... No Failures :-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;test-case-template&#34;&gt;Test case template&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;tests/scripts/test_template&lt;/code&gt; is a generic template, most of the tests are based on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;FILL IN SHORT DESCRIPTION HERE&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;FILL IN DETAILS OF HOW YOU TEST WHAT YOU SAY YOU ARE TESTING&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Run a make test.  See the documentation of run_make_test() in&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# run_make_tests.pl, but briefly the first argument is a string with the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# contents of a makefile to be tested, the second is a string containing the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# arguments to be passed to the make invocation, the third is a string&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# containing the expected output.  The fourth is the expected exit code for&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# make.  If not specified, it&amp;#39;s assumed that the make program should succeed&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# (exit with 0).&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Your test makefile goes here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;Arguments to pass to make go here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;Expected output from the invocation goes here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# There are various special tokens, options, etc.  See the full documentation&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# in run_make_tests.pl.&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# This tells the test driver that the perl test script executed properly.&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other tests follow a bit different approach: they use &lt;code&gt;run_make_with_options&lt;/code&gt;/&lt;code&gt;compare_output&lt;/code&gt; pair of functions to verify the expected output that Make produces. My assumption is that this alternative way is the old way of writing tests - we can clearly see that it is the easier and cleaner way to write tests using the test template from above. Below I have collected 3 examples which use both approaches based on either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run_make_test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run_make_with_options&lt;/code&gt;/&lt;code&gt;compare_output&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These functions are located in the file: &lt;code&gt;tests/run_make_tests.pl&lt;/code&gt; which is a test driver file for the whole test suite (the file is too long so it is not discussed in this post).&lt;/p&gt;

&lt;h4 id=&#34;test-case-example-1-simple-functionality-of-make&#34;&gt;Test case example #1: Simple functionality of make&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/misc/general1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;


&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;The following test creates a makefile to test the&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;simple functionality of make.  It mimics the&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;rebuilding of a product with dependencies.&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;It also tests the simple definition of VPATH.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;gt; $makefile&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;VPATH = $workdir&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;edit:  main.o kbd.o commands.o display.o \\&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;       insert.o&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -o edit main.o kbd.o commands.o display.o \\&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                  insert.o&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;main.o : main.c defs.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c main.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;kbd.o : kbd.c defs.h command.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c kbd.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;commands.o : command.c defs.h command.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c commands.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;display.o : display.c defs.h buffer.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c display.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;insert.o : insert.c defs.h buffer.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c insert.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;


&lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}main.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}defs.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}kbd.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}command.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}commands.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}display.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}buffer.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}insert.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	       &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}command.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_make_with_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$makefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Create the answer to what should be produced by this Makefile&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;cc -c main.c\ncc -c kbd.c\ncc -c commands.c\ncc -c display.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;cc -c insert.c\ncc -o edit main.o kbd.o commands.o display.o insert.o\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# COMPARE RESULTS&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compare_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;unlink&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;test-case-example-2-phony-targets&#34;&gt;Test case example #2: PHONY targets&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/targets/PHONY&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;The following tests the use of a PHONY target.  It makes\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;sure that the rules under a target get executed even if\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;a filename of the same name of the target exists in the\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;directory.\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;This makefile in this test declares the target clean to be a \n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;PHONY target.  We then create a file named \&amp;quot;clean\&amp;quot; in the \n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;directory.  Although this file exists, the rule under the target\n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean should still execute because of it&amp;#39;s phony status.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;EXAMPLE_FILE&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;gt; $makefile&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# The Contents of the MAKEFILE ...&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;.PHONY : clean \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;all: \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;\t\@echo This makefile did not clean the dir ... good\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;clean: \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;\t$delete_command $example clean\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# END of Contents of MAKEFILE&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Create a file named &amp;quot;clean&amp;quot;.  This is the same name as the target clean&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and tricks the target into thinking that it is up to date.  (Unless you&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# use the .PHONY target.&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;$delete_command $example clean\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_make_with_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$makefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$test_passed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compare_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;test-case-example-3-warn-undefined-variables-option&#34;&gt;Test case example #3: &amp;ndash;warn-undefined-variables option&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/options/warn-undefined-variables&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Test the --warn-undefined-variables option.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Verify that warnings are printed for referencing undefined variables.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Without --warn-undefined-variables, nothing should happen&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EMPTY =&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EREF = $(EMPTY)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;UREF = $(UNDEFINED)&lt;/span&gt;

&lt;span class=&#34;s&#34;&gt;SEREF := $(EREF)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;SUREF := $(UREF)&lt;/span&gt;

&lt;span class=&#34;s&#34;&gt;all: ; @echo ref $(EREF) $(UREF)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# With --warn-undefined-variables, it should warn me&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;undef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;--warn-undefined-variables&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;quot;#MAKEFILE#:7: warning: undefined variable &amp;#39;UNDEFINED&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;#MAKEFILE#:9: warning: undefined variable &amp;#39;UNDEFINED&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;open-issues&#34;&gt;Open issues&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;tests/README&lt;/code&gt; contains interesting section that one may read as high-level TODO list for the project (bold below is mine). It seems that there is some interesting stuff waiting for someone to contribute ;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;open-issues-1&#34;&gt;Open Issues&lt;/h2&gt;

&lt;p&gt;The test suite has a number of problems which should be addressed. &lt;strong&gt;One
VERY serious one is that there is no real documentation&lt;/strong&gt;.  You just have
to see the existing tests. Use the newer tests: many of the tests
haven&amp;rsquo;t been updated to use the latest/greatest test methods.  See the
ChangeLog in the tests directory for pointers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The second serious problem is that it&amp;rsquo;s not parallelizable&lt;/strong&gt;: it scribbles
all over its installation directory and so can only test one make at a
time. &lt;strong&gt;The third serious problem is that it&amp;rsquo;s not relocatable&lt;/strong&gt;: the only
way it works when you build out of the source tree is to create
symlinks, which doesn&amp;rsquo;t work on every system and is bogus to boot. &lt;strong&gt;The
fourth serious problem is that it doesn&amp;rsquo;t create its own sandbox when
running tests&lt;/strong&gt;, so that if a test forgets to clean up after itself that
can impact future tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;GNU Make has 581 tests: solid test suite introduced as early as of 1992.&lt;/li&gt;
&lt;li&gt;All of these tests are integration tests: the final executable &lt;code&gt;make&lt;/code&gt; is tested, not the parts of C code.&lt;/li&gt;
&lt;li&gt;Default GNU Make 3.81 on OSX machine is 10 years old, it fails 212 tests compared to the latest GNU Make 4.2 build from source which passes all of its tests green.&lt;/li&gt;
&lt;li&gt;There is always space for contribution: more documentation is needed, tests should have better sandboxing to achieve parallelism and removability.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us know what projects or tools you would like to see covered in this series: &lt;a href=&#34;http://systemundertest.org/&#34;&gt;System Under Test&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeBSD</title>
      <link>https://systemundertest.org/freebsd/</link>
      <pubDate>Thu, 31 Mar 2016 17:22:59 +0200</pubDate>
      
      <guid>https://systemundertest.org/freebsd/</guid>
      <description>

&lt;h3 id=&#34;what-is-the-project-about&#34;&gt;What is the project about?&lt;/h3&gt;

&lt;p&gt;FreeBSD is a well known Unix-based operating system.&lt;/p&gt;

&lt;h3 id=&#34;tests&#34;&gt;Tests&lt;/h3&gt;

&lt;p&gt;FreeBSD has one test suite. It contains ~3.6k tests and takes ~7.5 minutes to run on a virtual machine with 2Gb of RAM.&lt;/p&gt;

&lt;h4 id=&#34;getting-tests&#34;&gt;Getting Tests&lt;/h4&gt;

&lt;p&gt;The tests can be found in &lt;code&gt;/usr/tests&lt;/code&gt; directory. Though, you may not have them there because of one of the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test suite is not a part of any distribution prior to FreeBSD 10.0.&lt;/li&gt;
&lt;li&gt;Test suite is available out of the box only on FreeBSD 11.0 and newer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are on FreeBSD 10.0 and want to see tests, then you just need to re-build the system from sources.
Fortunately, it is very easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;WITH_TESTS=YES&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/src.conf
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /usr/src
make buildworld
make installworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;running-tests&#34;&gt;Running tests&lt;/h4&gt;

&lt;p&gt;FreeBSD adopted approach used by NetBSD project. Within the approach they included the toolchain: &lt;a href=&#34;https://github.com/jmmv/kyua&#34;&gt;Kyua&lt;/a&gt; and &lt;a href=&#34;https://github.com/jmmv/atf/&#34;&gt;ATF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially ATF provided both tools (e.g. test runner, report generator, etc.) and libraries (e.g. test cases, assertions, etc.). Over the years tools from ATF were replaced by Kyua.&lt;/p&gt;

&lt;p&gt;To run tests you need to point &lt;code&gt;kyua&lt;/code&gt; to a &lt;code&gt;Kyuafile&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /usr/tests
kyua &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -k ./Kyuafile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;when it’s done you may request report:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kyua report
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which shows brief information for all non-succeeded test and a summary, such as this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_freebsd/test_report.png&#34;
  style=&#34; display: block;
          margin-left: auto;
          margin-right: auto;
          width: 100%;
          height: auto;&#34;
  alt=&#34;Test report&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;toolchain&#34;&gt;Toolchain&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Kyuafile&lt;/code&gt; specifies which tests to run. It also can include other &lt;code&gt;Kyuafile&lt;/code&gt;s. Here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;lib/Kyuafile&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;atf_test_program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;some_atf_test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plain_test_program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;some_plain_test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tap_test_program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;some_tap_test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When run &lt;code&gt;kyua&lt;/code&gt; will execute all tests specified in &lt;code&gt;lib/Kyuafile&lt;/code&gt; (and in &lt;code&gt;Kyuafile&lt;/code&gt;s included from &lt;code&gt;lib/Kyuafile&lt;/code&gt;), and then will execute three tests: ATF test &lt;code&gt;some_atf_test&lt;/code&gt;, plain test &lt;code&gt;some_plain_test&lt;/code&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/Test_Anything_Protocol&#34;&gt;TAP&lt;/a&gt; test &lt;code&gt;some_tap_test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Plain test is basically a simple program that returns non-zero if test failed and zero otherwise.&lt;/p&gt;

&lt;p&gt;TAP tests are any possible tests, the only important thing there  is an output. If test prints &amp;ldquo;ok whatever&amp;rdquo; then it succeeded, if it prints &amp;ldquo;not ok whatnot&amp;rdquo; - it has failed.&lt;/p&gt;

&lt;p&gt;ATF tests intended to be more sophisticated. They may contain several test cases per file and provide useful information besides the exit code. Also, the tests may be written using C, C++ and shell.&lt;/p&gt;

&lt;p&gt;Here is a part of an ATF test written in shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;test5678901234567&amp;quot;&lt;/span&gt;

atf_test_case longname cleanup

longname_head&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  atf_set &lt;span class=&#34;s2&#34;&gt;&amp;quot;require.user&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;
  atf_set &lt;span class=&#34;s2&#34;&gt;&amp;quot;descr&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Test that usernames longer than 16 &amp;quot;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;quot;characters are allowed (PR bin/39546)&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

longname_body&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  atf_check -s &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;:0 -o ignore -e ignore -x &lt;span class=&#34;s2&#34;&gt;&amp;quot;pw useradd $username&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

longname_cleanup&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  atf_check -s ignore -o ignore -e ignore -x &lt;span class=&#34;s2&#34;&gt;&amp;quot;pw userdel $username&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

atf_init_test_cases&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  atf_add_test_case longname
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you try to find there a test written let’s say in C, then you will not succeed. All tests under &lt;code&gt;/usr/tests&lt;/code&gt; are executables.
The reason is that FreeBSD tools and libraries usually have their tests source code in their source tree. During installation these tests are compiled and copied to the &lt;code&gt;/usr/tests&lt;/code&gt;.
For example, if you want to see tests for libc’ stdio, then you need to look at &lt;code&gt;/usr/src/lib/libc/tests/stdio&lt;/code&gt;.
At the moment there is one test, here is part of it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;ATF_TC_WITHOUT_HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_append_binary_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ATF_TC_BODY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_append_binary_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  * For compatibility with other implementations (glibc), we set the&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  * position to 0 when opening an automatically allocated binary stream&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  * for appending.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmemopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;ab+&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ATF_REQUIRE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ftell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  * Make sure that a pre-allocated buffer behaves correctly.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmemopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;ab+&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ATF_REQUIRE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ftell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;FreeBSD has ~3.6k tests. The amount of tests is suspiciously small for such a big project. Since I was (and still am) afraid that I missed some important part I did ask on mailing list &lt;a href=&#34;https://lists.freebsd.org/pipermail/freebsd-testing/2016-March/001306.html&#34;&gt;question about available tests&lt;/a&gt;, but didn’t
get any answer so far.&lt;/p&gt;

&lt;p&gt;FreeBSD has lots of various tools and libraries, but not all of them tested.&lt;/p&gt;

&lt;p&gt;Maybe it’s a good starting point for a contribution?&lt;/p&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;man 7 tests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.freebsd.org/TestSuite&#34;&gt;FreeBSD Test Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.netbsd.org/kyua/&#34;&gt;Kyua: An introduction for NetBSD users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jmmv/kyua/wiki/About&#34;&gt;Kyua: project wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test_Anything_Protocol&#34;&gt;Test Anything Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LLVM</title>
      <link>https://systemundertest.org/llvm/</link>
      <pubDate>Thu, 24 Mar 2016 23:18:29 +0100</pubDate>
      
      <guid>https://systemundertest.org/llvm/</guid>
      <description>

&lt;h3 id=&#34;what-is-llvm-about&#34;&gt;What is LLVM about?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://llvm.org&#34;&gt;http://llvm.org&lt;/a&gt; says that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is not that much I can add here besides one link:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://aosabook.org/en/llvm.html&#34;&gt;The Architecture of Open Source Applications: LLVM&lt;/a&gt; by Chris Lattner.&lt;/p&gt;

&lt;p&gt;which sheds light on compilers in general and LLVM particularly.&lt;/p&gt;

&lt;p&gt;LLVM is rather an umbrella project than a single project. It consists of compiler, debugger, linker, assemblers for several CPUs and of the most important - its Core: back-end and middle-end.&lt;/p&gt;

&lt;p&gt;In this article I refer to LLVM as a back-end + middle-end, rather than the whole umbrella (that would be too much for one post).&lt;/p&gt;

&lt;h3 id=&#34;tests&#34;&gt;Tests&lt;/h3&gt;

&lt;p&gt;LLVM is a huge project. Therefore it has quite a few groups of tests: unit tests, regression tests, performance tracking and fuzzing tests.
Since the project is not trivial the tools used for testing are mostly written from scratch and are part of LLVM project.
Though, I wish I could use some of them without having LLVM as their dependency.&lt;/p&gt;

&lt;h4 id=&#34;unit-tests&#34;&gt;Unit Tests&lt;/h4&gt;

&lt;p&gt;Amount of unit tests is pretty small comparing to regression tests.
One reason behind that decision is that LLVM internals constantly change all the time. Supporting tests under such conditions is very time consuming.
However there are still parts that do not change very often, that is they are good target for unit testing.
These tests are located in &amp;lsquo;unittests&amp;rsquo; directory.&lt;/p&gt;

&lt;p&gt;They can be run using &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make check-llvm-unit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Showing this beautiful output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_llvm/unit_tests.png&#34;
  style=&#34; display: block;
          margin-left: auto;
          margin-right: auto;
          width: 100%;
          height: auto;&#34;
  alt=&#34;Unit tests&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see there are about 1,5k tests, and that leads to a pretty short execution time: ~30 seconds using 4 threads.&lt;/p&gt;

&lt;p&gt;Unit Tests are written using &lt;a href=&#34;https://github.com/google/googletest&#34;&gt;Google Test&lt;/a&gt; framework.
Here is an example of a simple test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// unittests/Support/YAMLParserTest.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TEST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;YAMLParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SameNodeIteratorOperatorNotEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SourceMgr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;yaml&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;yaml&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SequenceNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dyn_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yaml&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SequenceNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                                              &lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Begin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;EXPECT_TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Begin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;End&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;EXPECT_FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Begin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;EXPECT_FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;End&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty trivial.
Let&amp;rsquo;s move forward and look at another, more interesting group of tests.&lt;/p&gt;

&lt;h4 id=&#34;regression-tests&#34;&gt;Regression Tests&lt;/h4&gt;

&lt;p&gt;The aim of this test suite is to verify the output of different tools, hence the internals can change separately from tests, making support less time-consuming.
This test suite located in &lt;code&gt;test&lt;/code&gt; directory.
It is the largest group of tests used in LLVM. It is 10 times bigger than Unit Tests: ~15k vs ~1,5k.
It takes about 4 minutes to run on my machine using 4 threads.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make check-llvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output is pretty similar to one above:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://systemundertest.org/img/sut_llvm/regression_tests.png&#34;
  style=&#34; display: block;
          margin-left: auto;
          margin-right: auto;
          width: 100%;
          height: auto;&#34;
  alt=&#34;Regression tests&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Regression Tests (unlike Unit Tests) are using custom tools such as &lt;a href=&#34;http://llvm.org/docs/CommandGuide/lit.html&#34;&gt;lit (LLVM Integrated Tester)&lt;/a&gt; and &lt;a href=&#34;http://llvm.org/docs/CommandGuide/FileCheck.html&#34;&gt;FileCheck&lt;/a&gt;.
Let&amp;rsquo;s look at simple test to illustrate how it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-llvm&#34; data-lang=&#34;llvm&#34;&gt;&lt;span class=&#34;c&#34;&gt;; RUN: %lli %s | FileCheck %s&lt;/span&gt;

&lt;span class=&#34;vg&#34;&gt;@flt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12.0e+0&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;@str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;constant&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Double value: %f\0A\00&amp;quot;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;@printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;i8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nocapture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nounwind&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;@fflush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;i8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nounwind&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;@main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;%flt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;load&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;@flt&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;%float2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;frem&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%flt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5.0&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;%double1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fpext&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%float2&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;i8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;@printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;i8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;getelementptr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;@str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i64&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%double1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;@fflush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;i8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;; CHECK: Double value: 2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This test can be split into three parts:&lt;/p&gt;

&lt;p&gt;Run command (the top line):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-llvm&#34; data-lang=&#34;llvm&#34;&gt;&lt;span class=&#34;c&#34;&gt;; RUN: %lli %s | FileCheck %s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Expectations (the bottom line):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-llvm&#34; data-lang=&#34;llvm&#34;&gt;&lt;span class=&#34;c&#34;&gt;; CHECK: Double value: 2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The rest (LLVM IR in the middle) is the body.&lt;/p&gt;

&lt;p&gt;All tests in this suite have one or more &amp;lsquo;run&amp;rsquo; command.
&lt;code&gt;lit&lt;/code&gt; uses set of rules to substitute the string into real runnable command. Substitutions are either built-in (such as &lt;code&gt;%s&lt;/code&gt;) or configurable (such as &lt;code&gt;%lli&lt;/code&gt;).
&lt;code&gt;lit&lt;/code&gt; replaces &lt;code&gt;%s&lt;/code&gt; with the full path to a file under test, e.g.:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~/llvm/test/ExecutionEngine/frem.ll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configurable substitutions however are taken from &lt;code&gt;lit.cfg&lt;/code&gt; file, which is basically a Python script.&lt;/p&gt;

&lt;p&gt;For example, this config says that &lt;code&gt;%lli&lt;/code&gt; is to be replaced with &lt;code&gt;/usr/local/bin/lli&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;lli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;/usr/local/bin/lli&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;substitutions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;%lli&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lli&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Having these parameters in place &lt;code&gt;lit&lt;/code&gt; will run the test using this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;/usr/local/bin/lli ~/llvm/test/ExecutionEngine/frem.ll | FileCheck ~/llvm/test/ExecutionEngine/frem.ll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which will interpret &lt;code&gt;frem.ll&lt;/code&gt; using LLVM Interpreter (&lt;code&gt;lli&lt;/code&gt;) and pass the output to the &lt;code&gt;FileCheck&lt;/code&gt;. &lt;code&gt;FileCheck&lt;/code&gt; in turn takes two arguments: filename with expectations and input that needs to be examined.&lt;/p&gt;

&lt;p&gt;Summary of this example:&lt;/p&gt;

&lt;p&gt;The test interprets the body (LLVM IR) from &lt;code&gt;~/llvm/test/ExecutionEngine/frem.ll&lt;/code&gt; using LLVM Interpreter (&lt;code&gt;%lli&lt;/code&gt; aka &lt;code&gt;/usr/local/bin/lli&lt;/code&gt;) and checks if the output of interpretation contains string &lt;code&gt;Double value: 2.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;lit&lt;/code&gt; and &lt;code&gt;FileCheck&lt;/code&gt; have lots of useful options. Consider looking at documentation to learn more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;upd 22.06.16:&lt;/strong&gt;&lt;/em&gt;
As Daniel Dunbar &lt;a href=&#34;https://twitter.com/daniel_dunbar/status/745285660626452480&#34;&gt;mentioned&lt;/a&gt; it possible to use &lt;code&gt;lit&lt;/code&gt; without LLVM, simply by installing it using &lt;code&gt;pip&lt;/code&gt;: &lt;code&gt;pip install lit&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;performance-tracking&#34;&gt;Performance tracking&lt;/h4&gt;

&lt;p&gt;Performance is one of the most important goals of any software. LLVM is not an exception.&lt;/p&gt;

&lt;p&gt;Here LLVM also uses custom tool - &lt;a href=&#34;http://llvm.org/docs/lnt/intro.html&#34;&gt;LNT&lt;/a&gt;. This tool was initially written to be used inside LLVM, but its design allows it to be usable for performance testing of any other software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://llvm.org/docs/TestingGuide.html#test-suite-overview&#34;&gt;Performance tests suite&lt;/a&gt; is not a part of LLVM source tree. It has to be fetched separately. It is a set of programs that are compiled and executed to track performance changes.&lt;/p&gt;

&lt;p&gt;Besides &lt;code&gt;LNT&lt;/code&gt; the test suite can be used within CMake as described in &lt;a href=&#34;http://llvm.org/docs/TestSuiteMakefileGuide.html&#34;&gt;LLVM &lt;code&gt;test-suite&lt;/code&gt; Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the moment of writing this article external test suite contains 485 test cases. It takes ~5 minutes to run them using &lt;code&gt;lit&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;fuzz-testing&#34;&gt;Fuzz Testing&lt;/h4&gt;

&lt;p&gt;Another powerful technique used to increase quality of LLVM is &lt;a href=&#34;https://en.wikipedia.org/wiki/Fuzz_testing&#34;&gt;Fuzz Testing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here as well LLVM has its own tool called &lt;a href=&#34;http://llvm.org/docs/LibFuzzer.html&#34;&gt;LibFuzzer&lt;/a&gt;.
The tool is so great that it is also used by &lt;a href=&#34;http://llvm.org/docs/LibFuzzer.html#trophies&#34;&gt;other software&lt;/a&gt; such as Python, PCRE, OpenSSL, SQLite, and other.&lt;/p&gt;

&lt;p&gt;Here is an example of a fuzz test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// tools/llvm-as-fuzzer/llvm-as-fuzzer.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LLVMFuzzerTestOneInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Allocate space for locals before setjmp so that memory can be collected&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// if parse exits prematurely (via longjmp).&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;StringRef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Note: We need to create a buffer to add a null terminator to the&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// end of the input string. The parser assumes that the string&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// parsed is always null terminated.&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unique_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MemoryBuffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemBuf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemoryBuffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getMemBufferCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SMDiagnostic&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;LLVMContext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getGlobalContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unique_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setjmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JmpBuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// If reached, we have returned with non-zero status, so exit.&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// TODO(kschimpf) Write a main to do this initialization.&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InstalledHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;llvm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;install_fatal_error_handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyFatalErrorHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;InstalledHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;M&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parseAssembly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MemBuf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getMemBufferRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;verifyModule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;LibFuzzer&lt;/code&gt; generates huge amount of different inputs using &lt;a href=&#34;https://en.wikipedia.org/wiki/Genetic_programming&#34;&gt;Genetic programming&lt;/a&gt; and calls &lt;code&gt;LLVMFuzzerTestOneInput&lt;/code&gt; within each input.
This test then tries to parse the input as an assembly. The parser should not crash.&lt;/p&gt;

&lt;p&gt;At the moment there are two targets for fuzz testing within LLVM source tree: &lt;code&gt;llvm-as-fuzzer&lt;/code&gt; and &lt;code&gt;llvm-mc-fuzzer&lt;/code&gt;. They are located in &lt;code&gt;tools&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;LLVM uses a few test suites for different needs.
There are ~1,5k Unit Tests, ~15k Regression Tests. It takes ~4-5 minutes to run both tests in Debug mode on 2 y/o MacBook Pro using 4 threads.&lt;/p&gt;

&lt;p&gt;LLVM uses Fuzzing Tests to prevent system from abnormal exit when erroneous input received.&lt;/p&gt;

&lt;p&gt;LLVM has out-of-source-tree test-suite for performance tracking.&lt;/p&gt;

&lt;p&gt;LLVM mostly uses custom tools for testing.&lt;/p&gt;

&lt;h3 id=&#34;further-reading-additional-material&#34;&gt;Further Reading / Additional Material&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/TestingGuide.html&#34;&gt;LLVM Testing Infrastructure Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/CommandGuide/lit.html&#34;&gt;LLVM Integrated Tester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/CommandGuide/FileCheck.html&#34;&gt;FileCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/LibFuzzer.html&#34;&gt;LibFuzzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/TestSuiteMakefileGuide.html&#34;&gt;LLVM test-suite Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/lnt/quickstart.html&#34;&gt;LNT Quickstart Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
