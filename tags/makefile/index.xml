<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>makefile on System Under Test</title>
    <link>http://systemundertest.org/tags/makefile/</link>
    <description>Recent content in makefile on System Under Test</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Jul 2016 07:37:18 +0200</lastBuildDate>
    <atom:link href="http://systemundertest.org/tags/makefile/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GNU Make</title>
      <link>http://systemundertest.org/gnu-make/</link>
      <pubDate>Sun, 12 Jun 2016 21:05:00 +0200</pubDate>
      
      <guid>http://systemundertest.org/gnu-make/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; the author of this post is not involved into a development of GNU Make project. All of the following is merely a high-level report about what a curious developer can see from looking at the GNU Make&amp;rsquo;s sources. The author didn&amp;rsquo;t go very deep into the topic, could overlook something etc. Having that said, we always appreciate feedback from our colleagues who have advanced experience with the projects we write about, especially from the developers and maintainers.&lt;/p&gt;

&lt;h3 id=&#34;getting-gnu-make-s-sources&#34;&gt;Getting GNU Make&amp;rsquo;s sources&lt;/h3&gt;

&lt;p&gt;GNU Make&amp;rsquo;s source code is available from git repository and can be found 2 links away from the Make&amp;rsquo;s main home page: &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Development&lt;/p&gt;

&lt;p&gt;For development sources, issue trackers, and other information, please see the Make project page at savannah.gnu.org.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On &lt;a href=&#34;http://savannah.gnu.org/projects/make&#34;&gt;Make&amp;rsquo;s Savannah&amp;rsquo;s page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://savannah.gnu.org/git/?group=make&#34;&gt;Git Source Code Manager: Git Repository&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get Make&amp;rsquo;s sources:&lt;/p&gt;

&lt;pre&gt;
git clone git://git.savannah.gnu.org/make.git GNUMake
cd make
&lt;/pre&gt;

&lt;h3 id=&#34;good-news-make-has-tests&#34;&gt;Good news: Make has tests&lt;/h3&gt;

&lt;pre&gt;
$ ls -l tests/
total 376
-rw-r--r--   1 Stanislaw  staff  35147 May 27 20:54 COPYING
-rw-r--r--   1 Stanislaw  staff  48828 May 27 20:54 ChangeLog.1
-rw-r--r--   1 Stanislaw  staff   6765 May 27 20:54 NEWS
-rw-r--r--   1 Stanislaw  staff   4677 May 27 20:54 README
-rw-r--r--   1 Stanislaw  staff    470 May 27 20:54 config-flags.pm.in
-rwxr-xr-x   1 Stanislaw  staff   1705 May 27 20:54 config_flags_pm.com
-rw-r--r--   1 Stanislaw  staff    359 May 27 20:54 guile.supp
-rwxr-xr-x   1 Stanislaw  staff   1424 May 27 20:54 mkshadow
-rwxr-xr-x   1 Stanislaw  staff     36 May 27 20:54 run_make_tests
-rwxr-xr-x   1 Stanislaw  staff   8330 May 27 20:54 run_make_tests.com
-rw-r--r--   1 Stanislaw  staff  14179 May 27 20:54 run_make_tests.pl
drwxr-xr-x  10 Stanislaw  staff    340 May 27 20:54 scripts
-rw-r--r--   1 Stanislaw  staff  40197 May 27 20:54 test_driver.pl
&lt;/pre&gt;

&lt;p&gt;The actual tests are located in &lt;code&gt;tests/scripts&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;
$ ls -l tests/scripts
total 8
drwxr-xr-x  40 Stanislaw  staff  1360 Jun  2 21:47 features
drwxr-xr-x  31 Stanislaw  staff  1054 May 27 20:54 functions
drwxr-xr-x  10 Stanislaw  staff   340 May 27 20:54 misc
drwxr-xr-x  18 Stanislaw  staff   612 May 29 10:22 options
drwxr-xr-x  12 Stanislaw  staff   408 Jun 10 20:42 targets
-rw-r--r--   1 Stanislaw  staff  1015 May 27 20:54 test_template
drwxr-xr-x  22 Stanislaw  staff   748 May 27 20:54 variables
drwxr-xr-x   3 Stanislaw  staff   102 May 27 20:54 vms
&lt;/pre&gt;

&lt;p&gt;The following are interesting notes I found before running the tests.&lt;/p&gt;

&lt;h4 id=&#34;the-oldest-update-in-news-file-dates-back-to-1992&#34;&gt;The oldest update in NEWS file dates back to 1992&lt;/h4&gt;

&lt;pre&gt;
Changes from 0.1 to 0.2 (5-4-92):

README corrected to require perl 4.019, not 4.010.

-make_path replaces -old.

errors_in_commands test updated for change in format introduced in
make 3.62.6.

test_driver_core now uses a better way of figuring what OS it is
running on (thanks to meyering@cs.utexas.edu (Jim Meyering) for
suggesting this, as well as discovering the hard way that the old
way (testing for /mnt) fails on his machine).

Some new tests were added.
&lt;/pre&gt;

&lt;p&gt;This means that &lt;strong&gt;tests in Make were introduced as early as of 1992!&lt;/strong&gt; which is a very good sign given some other tools are likely to not have a good coverage even in present days as described in another article of this series: &lt;a href=&#34;http://systemundertest.org/freebsd&#34;&gt;System Under Test: FreeBSD&lt;/a&gt; (see Conclusion there).&lt;/p&gt;

&lt;h4 id=&#34;the-test-suite-requires-perl-and-can-be-run-on-unix-windows-and-dos-systems&#34;&gt;The test suite requires Perl and can be run on UNIX, Windows and DOS systems&lt;/h4&gt;

&lt;pre&gt;
To run the test suite on a UNIX system, use &#34;perl ./run_make_tests&#34;
(or just &#34;./run_make_tests&#34; if you have a perl on your PATH).

To run the test suite on Windows NT or DOS systems, use
&#34;perl.exe ./run_make-tests.pl&#34;.
&lt;/pre&gt;

&lt;h4 id=&#34;the-test-suite-is-run-against-make-executable&#34;&gt;The test suite is run against Make executable&lt;/h4&gt;

&lt;pre&gt;
By default, the test engine picks up the first executable called &#34;make&#34;
that it finds in your path.  You may use the -make_path option (i.e.,
&#34;perl run_make_tests -make_path /usr/local/src/make-3.78/make&#34;) if
you want to run a particular copy.  This now works correctly with
relative paths and when make is called something other than &#34;make&#34; (like
&#34;gmake&#34;).
&lt;/pre&gt;

&lt;p&gt;This observation leads us to conclusion that these &lt;strong&gt;GNU Make&amp;rsquo;s tests are actually integration tests&lt;/strong&gt; - it is the final &lt;code&gt;make&lt;/code&gt; executable that is tested, not its parts like they would be with unit testing (depending on terminology this kind of testing of a final product can also be called functional or acceptance testing).&lt;/p&gt;

&lt;h4 id=&#34;build-artefacts&#34;&gt;Build artefacts&lt;/h4&gt;

&lt;pre&gt;
A directory named &#34;work&#34; will be created when the tests are run which
will contain any makefiles and &#34;diff&#34; files of tests that fail so that
you may look at them afterward to see the output of make and the
expected result.
&lt;/pre&gt;

&lt;h3 id=&#34;running-tests-against-default-osx-make&#34;&gt;Running tests against default OSX Make&lt;/h3&gt;

&lt;p&gt;Having read both documents: &lt;code&gt;tests/NEWS&lt;/code&gt; and &lt;code&gt;tests/README&lt;/code&gt; let&amp;rsquo;s try to run the tests. As we learned earlier, by default the test suite will pick up first &lt;code&gt;make&lt;/code&gt; from path so it will default to default make of OSX system which is on my machine:&lt;/p&gt;

&lt;pre&gt;
make -v
GNU Make 3.81
Copyright (C) 2006  Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

This program built for i386-apple-darwin11.3.0
&lt;/pre&gt;

&lt;p&gt;If you ever wondered why default &lt;code&gt;make&lt;/code&gt; on OS X is so old, you are in good company - see &lt;a href=&#34;https://www.quora.com/What-is-the-reason-for-some-of-the-Linux-tools-on-OS-X-being-so-old-Is-this-related-to-GPL-licensing&#34;&gt;What is the reason for some of the Linux tools on OS X being so old? Is this related to GPL licensing?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To run tests:&lt;/p&gt;

&lt;pre&gt;
$ cd tests/
$ # The following has to be done otherwise script will complain with:
$ # &#34;Can&#39;t locate config-flags.pm in @INC...&#34;
$ cp config-flags.pm.in config-flags.pm
$ ./run_make_tests
...
output with lots of errors and finally:
212 Tests in 66 Categories Failed (See .diff* files in work dir for details) :-(
&lt;/pre&gt;

&lt;p&gt;We see here that oldness of default Make on OS X does cost 212 failing tests. I assume that the reason why most of these failing tests are failing is not a regression in core functionality of Make but rather because of new features were added to GNU Make since 2006.&lt;/p&gt;

&lt;p&gt;To understand how that is different for latest Make let&amp;rsquo;s build it from source and run tests against it.&lt;/p&gt;

&lt;h3 id=&#34;running-tests-against-latest-make-built-from-source&#34;&gt;Running tests against latest Make built from source&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s get back from &lt;code&gt;tests&lt;/code&gt; directory one level up to the root directory of source tree. Inspired by the instructions in INSTALL and after some additional googling we need to run &lt;code&gt;autoreconf&lt;/code&gt; so that it creates proper &lt;code&gt;configure&lt;/code&gt; script for us:&lt;/p&gt;

&lt;pre&gt;
$ pwd # /Users/Stanislaw/Projects/GNUMake
$ brew install automake
$ # gettext is needed by autoreconf to locate gettext,
$ # be careful with force linking it on your system.
$ brew install gettext
$ brew link gettext --force
$ autoreconf # creates &#39;configure&#39; script
&lt;/pre&gt;

&lt;p&gt;Then we want to run this newly created script with &lt;code&gt;--prefix&lt;/code&gt; parameter so that it will not install make to the &lt;code&gt;/usr/local/bin&lt;/code&gt; directory but rather to &lt;code&gt;./Build&lt;/code&gt; directory (to not conflict with OSX&amp;rsquo;s Make which we don&amp;rsquo;t want within the scope of this post).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;./configure --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/Build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point if you run &lt;code&gt;make&lt;/code&gt; the very first time you will likely see errors about some localization files missing:&lt;/p&gt;

&lt;pre&gt;
Making all in doc
Updating ./version.texi
make[2]: *** No rule to make target `fdl.texi&#39;, needed by `make.info&#39;.  Stop.
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2
&lt;/pre&gt;

&lt;p&gt;To fix that you have to first run (solution found at &lt;a href=&#34;http://gnu-make.2324884.n4.nabble.com/NLS-related-failure-when-building-make-from-CVS-tp2157p2158.html&#34;&gt;GNU Make forums&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything should work fine since then, finally we run:&lt;/p&gt;

&lt;pre&gt;
$ make &amp;&amp; make install
...
  /usr/bin/install -c make &#39;/Users/Stanislaw/Projects/Make/GNUMake/Build/bin&#39;
...
$ ./Build/bin/make --version
GNU Make 4.2
Built for x86_64-apple-darwin15.3.0
Copyright (C) 1988-2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
&lt;/pre&gt;

&lt;p&gt;Which is 2006&amp;rsquo;s Make 3.81 that has just been used to build 2016&amp;rsquo;s Make 4.2!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run the tests!&lt;/p&gt;

&lt;pre&gt;
$ cd tests
$ ./run_make_tests -make ../Build/bin/make
&lt;/pre&gt;

&lt;p&gt;The results are quite pleasant to look at - &lt;strong&gt;GNU Make built from latest source code on Mac OS X machine, passes all of its tests&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;581 Tests in 118 Categories Complete ... No Failures :-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;test-case-template&#34;&gt;Test case template&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;tests/scripts/test_template&lt;/code&gt; is a generic template, most of the tests are based on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;FILL IN SHORT DESCRIPTION HERE&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;FILL IN DETAILS OF HOW YOU TEST WHAT YOU SAY YOU ARE TESTING&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Run a make test.  See the documentation of run_make_test() in&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# run_make_tests.pl, but briefly the first argument is a string with the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# contents of a makefile to be tested, the second is a string containing the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# arguments to be passed to the make invocation, the third is a string&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# containing the expected output.  The fourth is the expected exit code for&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# make.  If not specified, it&amp;#39;s assumed that the make program should succeed&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# (exit with 0).&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Your test makefile goes here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;Arguments to pass to make go here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;Expected output from the invocation goes here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# There are various special tokens, options, etc.  See the full documentation&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# in run_make_tests.pl.&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# This tells the test driver that the perl test script executed properly.&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other tests follow a bit different approach: they use &lt;code&gt;run_make_with_options&lt;/code&gt;/&lt;code&gt;compare_output&lt;/code&gt; pair of functions to verify the expected output that Make produces. My assumption is that this alternative way is the old way of writing tests - we can clearly see that it is the easier and cleaner way to write tests using the test template from above. Below I have collected 3 examples which use both approaches based on either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run_make_test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run_make_with_options&lt;/code&gt;/&lt;code&gt;compare_output&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These functions are located in the file: &lt;code&gt;tests/run_make_tests.pl&lt;/code&gt; which is a test driver file for the whole test suite (the file is too long so it is not discussed in this post).&lt;/p&gt;

&lt;h4 id=&#34;test-case-example-1-simple-functionality-of-make&#34;&gt;Test case example #1: Simple functionality of make&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/misc/general1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;


&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;The following test creates a makefile to test the&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;simple functionality of make.  It mimics the&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;rebuilding of a product with dependencies.&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;It also tests the simple definition of VPATH.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;gt; $makefile&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;VPATH = $workdir&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;edit:  main.o kbd.o commands.o display.o \\&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;       insert.o&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -o edit main.o kbd.o commands.o display.o \\&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                  insert.o&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;main.o : main.c defs.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c main.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;kbd.o : kbd.c defs.h command.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c kbd.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;commands.o : command.c defs.h command.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c commands.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;display.o : display.c defs.h buffer.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c display.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;insert.o : insert.c defs.h buffer.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c insert.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;


&lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}main.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}defs.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}kbd.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}command.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}commands.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}display.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}buffer.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}insert.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	       &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}command.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_make_with_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$makefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Create the answer to what should be produced by this Makefile&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;cc -c main.c\ncc -c kbd.c\ncc -c commands.c\ncc -c display.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;cc -c insert.c\ncc -o edit main.o kbd.o commands.o display.o insert.o\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# COMPARE RESULTS&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compare_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;unlink&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;test-case-example-2-phony-targets&#34;&gt;Test case example #2: PHONY targets&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/targets/PHONY&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;The following tests the use of a PHONY target.  It makes\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;sure that the rules under a target get executed even if\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;a filename of the same name of the target exists in the\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;directory.\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;This makefile in this test declares the target clean to be a \n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;PHONY target.  We then create a file named \&amp;quot;clean\&amp;quot; in the \n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;directory.  Although this file exists, the rule under the target\n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean should still execute because of it&amp;#39;s phony status.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;EXAMPLE_FILE&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;gt; $makefile&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# The Contents of the MAKEFILE ...&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;.PHONY : clean \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;all: \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;\t\@echo This makefile did not clean the dir ... good\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;clean: \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;\t$delete_command $example clean\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# END of Contents of MAKEFILE&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Create a file named &amp;quot;clean&amp;quot;.  This is the same name as the target clean&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and tricks the target into thinking that it is up to date.  (Unless you&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# use the .PHONY target.&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;$delete_command $example clean\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_make_with_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$makefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$test_passed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compare_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;test-case-example-3-warn-undefined-variables-option&#34;&gt;Test case example #3: &amp;ndash;warn-undefined-variables option&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/options/warn-undefined-variables&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Test the --warn-undefined-variables option.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Verify that warnings are printed for referencing undefined variables.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Without --warn-undefined-variables, nothing should happen&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EMPTY =&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EREF = $(EMPTY)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;UREF = $(UNDEFINED)&lt;/span&gt;

&lt;span class=&#34;s&#34;&gt;SEREF := $(EREF)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;SUREF := $(UREF)&lt;/span&gt;

&lt;span class=&#34;s&#34;&gt;all: ; @echo ref $(EREF) $(UREF)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# With --warn-undefined-variables, it should warn me&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;undef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;--warn-undefined-variables&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;quot;#MAKEFILE#:7: warning: undefined variable &amp;#39;UNDEFINED&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;#MAKEFILE#:9: warning: undefined variable &amp;#39;UNDEFINED&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;open-issues&#34;&gt;Open issues&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;tests/README&lt;/code&gt; contains interesting section that one may read as high-level TODO list for the project (bold below is mine). It seems that there is some interesting stuff waiting for someone to contribute ;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;open-issues-1&#34;&gt;Open Issues&lt;/h2&gt;

&lt;p&gt;The test suite has a number of problems which should be addressed. &lt;strong&gt;One
VERY serious one is that there is no real documentation&lt;/strong&gt;.  You just have
to see the existing tests. Use the newer tests: many of the tests
haven&amp;rsquo;t been updated to use the latest/greatest test methods.  See the
ChangeLog in the tests directory for pointers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The second serious problem is that it&amp;rsquo;s not parallelizable&lt;/strong&gt;: it scribbles
all over its installation directory and so can only test one make at a
time. &lt;strong&gt;The third serious problem is that it&amp;rsquo;s not relocatable&lt;/strong&gt;: the only
way it works when you build out of the source tree is to create
symlinks, which doesn&amp;rsquo;t work on every system and is bogus to boot. &lt;strong&gt;The
fourth serious problem is that it doesn&amp;rsquo;t create its own sandbox when
running tests&lt;/strong&gt;, so that if a test forgets to clean up after itself that
can impact future tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;GNU Make has 581 tests: solid test suite introduced as early as of 1992.&lt;/li&gt;
&lt;li&gt;All of these tests are integration tests: the final executable &lt;code&gt;make&lt;/code&gt; is tested, not the parts of C code.&lt;/li&gt;
&lt;li&gt;Default GNU Make 3.81 on OSX machine is 10 years old, it fails 212 tests compared to the latest GNU Make 4.2 build from source which passes all of its tests green.&lt;/li&gt;
&lt;li&gt;There is always space for contribution: more documentation is needed, tests should have better sandboxing to achieve parallelism and removability.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us know what projects or tools you would like to see covered in this series: &lt;a href=&#34;http://systemundertest.org/&#34;&gt;System Under Test&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
