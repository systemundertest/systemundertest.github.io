<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System Under Test</title>
    <link>http://systemundertest.org/tags/testing/index.xml</link>
    <description>Recent content on System Under Test</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Brought to you by curious developers</copyright>
    <atom:link href="/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>XTerm</title>
      <link>http://systemundertest.org/xterm/</link>
      <pubDate>Thu, 28 Jul 2016 05:34:00 +0100</pubDate>
      
      <guid>http://systemundertest.org/xterm/</guid>
      <description>

&lt;style&gt;

article img {
    box-shadow: 1px 1px 6px #ccc;
    width:      100%;
    height:     auto;
    display:    block;
    margin:     20px auto;
}

article img.inline-50perc {
    float:left;
    box-shadow: 1px 1px 6px #ccc;
    width:      360px;
    height:     auto;
    display:    block;
    margin:     10px 20px;
    margin-left: 0;
}

&lt;/style&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is written for &amp;ldquo;System Under Test&amp;rdquo; blog and is a research on how XTerm project is tested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; the author of this post is not involved into a development of XTerm project. All of the following is merely a high-level report about what a curious developer can see from looking at XTerm&amp;rsquo;s source code. The author didn&amp;rsquo;t go very deep into the topic, could overlook something etc. Having that said, we always appreciate feedback from our colleagues who have advanced experience with the projects we write about, especially from the developers and maintainers.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-project-about&#34;&gt;What is the project about?&lt;/h2&gt;

&lt;p&gt;The project&amp;rsquo;s home page is located at: &lt;a href=&#34;http://invisible-island.net/xterm/&#34;&gt;http://invisible-island.net/xterm/&lt;/a&gt;, here is the description from Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;xterm is the standard terminal emulator for the X Window System.&lt;/p&gt;

&lt;p&gt;xterm originated prior to the X Window System. It was originally written as a stand-alone terminal emulator for the VAXStation 100 (VS100) by Mark Vandevoorde, a student of Jim Gettys, in the summer of 1984, when work on X started. It rapidly became clear that it would be more useful as part of X than as a standalone program, so it was retargeted to X.&lt;/p&gt;

&lt;p&gt;After many years as part of the X reference implementation, around 1996 the main line of development then shifted to XFree86 (which itself forked from X11R6.3), and it is now actively maintained by Thomas Dickey.&lt;/p&gt;

&lt;p&gt;Many xterm variants are also available. Most terminal emulators for X started as variations on xterm.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Xterm&#34;&gt;https://en.wikipedia.org/wiki/Xterm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will look at three projects: XTerm, &lt;a href=&#34;http://invisible-island.net/vttest/vttest.html&#34;&gt;Vttest&lt;/a&gt; tool and so-called &lt;a href=&#34;http://invisible-island.net/ncurses/ncurses-examples.html#synopsis&#34;&gt;ncurses test programs&lt;/a&gt;. The maintainer of all of these projects is &lt;a href=&#34;http://invisible-island.net/&#34;&gt;Thomas E. Dickey&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-tested-in-xterm&#34;&gt;What is tested in XTerm?&lt;/h2&gt;

&lt;p&gt;Using frontend-backend terminology, we may think of a terminal emulator (like XTerm or OS X Terminal) as a frontend that communicates with a backend, which is operating system, with a middleware in between: shell (like bash or zsh).&lt;/p&gt;

&lt;p&gt;Historically, the protocols for this communication between terminal&amp;rsquo;s frontend and backend evolved around usage of &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI escape codes&lt;/a&gt;, and were eventually standardized in ECMA-48/ISO 6429/ANSI X3.64 standards. The first popular video terminal to support these codes was the Digital VT100, introduced in 1978 (&lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Ability to correctly recognize and handle sufficiently large number of escape codes is a crucial part of implementation of any terminal. For example, to make &lt;code&gt;Vim&lt;/code&gt;, &lt;code&gt;man&lt;/code&gt; or command-line editing work correctly, one has to implement escape controls that are required for these programs, otherwise terminal emulator will produce malformed output (or crash).&lt;/p&gt;

&lt;p&gt;&lt;i&gt;The following example demonstrates what terminal emulator (frontend) receives from operating system (backend), after you type &lt;code&gt;vi&lt;/code&gt; and then press &amp;ldquo;Enter&amp;rdquo; in OS X Terminal. Terminal emulator has to interpret these codes and react on them accordingly.&lt;/i&gt;&lt;/p&gt;


&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;How Vim is rendered&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
&lt;img class=&#34;inline-50perc&#34; src=&#34;http://systemundertest.org/img/sut_xterm/terminal_vim_log.png&#34;/&gt;
&lt;img class=&#34;inline-50perc&#34; src=&#34;http://systemundertest.org/img/sut_xterm/terminal_vim.png&#34;/&gt;
&lt;i&gt;In a real world, ESC character (ASCII decimal 27/hex 0x1B/octal 033) is not printable. It is manually substituted in the log trace (left image) to be human-readable as &#34;ESC&#34;.&lt;/i&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One of the key features of XTerm is that it supports most of the control sequences ever available for terminal emulators:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;XTerm provides DEC VT102/VT220 and selected features from higher-level terminals such as VT320/VT420/VT520 (VTxxx). It also provides Tektronix 4014 emulation for programs that cannot use the window system directly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://invisible-island.net/xterm/xterm.faq.html#what_is_it&#34;&gt;http://invisible-island.net/xterm/xterm.faq.html#what_is_it&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to &lt;a href=&#34;http://invisible-island.net/xterm/xterm.faq.html#compare_versions&#34;&gt;Comparing versions, by counting controls&lt;/a&gt;, XTerm implements at least twice as many of escape codes as any of well-known terminals: rxvt, putty, konsole, vte and some others, and at this point one may really wonder how all of this functionality is tested by XTerm&amp;rsquo;s developer.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;h3 id=&#34;getting-xterm&#34;&gt;Getting XTerm&lt;/h3&gt;

&lt;p&gt;If you want to run XTerm on Mac OS X, you have to have &lt;a href=&#34;https://www.xquartz.org/&#34;&gt;XQuartz&lt;/a&gt; installed.&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&#34;http://invisible-island.net/xterm/#download&#34;&gt;project&amp;rsquo;s page, Download section&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://invisible-island.net/xterm/xterm.tar.gz
tar xzvf xterm.tar.gz
cd xterm-325
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;./configure --prefix=$(pwd)/Build/ --enable-trace
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to run xterm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./Build/bin/xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Passing &lt;code&gt;--enable-trace&lt;/code&gt; enables tracing functions: when you run &lt;code&gt;xterm&lt;/code&gt; two files are created: &lt;code&gt;Trace-child.out&lt;/code&gt; and &lt;code&gt;Trace-parent.out&lt;/code&gt;, where &lt;code&gt;xterm&lt;/code&gt; writes debug information. Enabling this flag is not relevant for this post, but can be interesting for someone who wants to look behind the scenes and see what information is relevant to a developer of XTerm.&lt;/p&gt;

&lt;h3 id=&#34;getting-vttest&#34;&gt;Getting Vttest&lt;/h3&gt;

&lt;p&gt;Vttest&amp;rsquo;s source code is located at: &lt;a href=&#34;http://invisible-island.net/vttest/:&#34;&gt;http://invisible-island.net/vttest/:&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://invisible-island.net/vttest/vttest.tar.gz
tar xzvf vttest.tar.gz
cd vttest-20140305
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;./configure --prefix=$(pwd)/Build
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./Build/bin/vttest
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-ncurses-test-programs&#34;&gt;Getting ncurses test programs&lt;/h3&gt;

&lt;p&gt;From &lt;a href=&#34;http://invisible-island.net/ncurses/ncurses-examples.html:&#34;&gt;http://invisible-island.net/ncurses/ncurses-examples.html:&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://invisible-island.net/ncurses-examples/current/ncurses-examples.tar.gz
tar xzvf ncurses-examples.tar.gz
cd ncurses-examples-20160709
./configure
make
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-groups-of-tests&#34;&gt;3 groups of tests&lt;/h2&gt;

&lt;p&gt;Exploration of &lt;code&gt;XTerm&lt;/code&gt;, &lt;code&gt;vttest&lt;/code&gt; and &lt;code&gt;ncurses test programs&lt;/code&gt; reveals three corresponding groups of tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;vttests/*&lt;/code&gt; in XTerm&amp;rsquo;s source tree: test scripts written in Perl and Bash&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vttest&lt;/code&gt; program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ncurses test programs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These groups are independent from each other however they all share the same approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;All three groups are visual and manual tests.&lt;/strong&gt; This means that to verify them, developer has to run these tests (including tests inside &lt;code&gt;vttest&lt;/code&gt; program) manually and look for discrepancies between expected visual output and real visual output produced by terminal emulator that is under test.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All of these tests have to be run from inside terminal emulator that is being tested.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xterm-vttests&#34;&gt;XTerm/vttests/*&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l
-rwxr-xr-x@ 1 Stanislaw  staff  3434 Dec 11  2011 16colors.sh
-rwxr-xr-x@ 1 Stanislaw  staff  2083 Feb 26  2014 256colors.pl
-rwxr-xr-x@ 1 Stanislaw  staff  5043 Feb 26  2014 256colors2.pl
-rwxr-xr-x@ 1 Stanislaw  staff  1947 Feb 26  2014 88colors.pl
-rwxr-xr-x@ 1 Stanislaw  staff  5105 Feb 26  2014 88colors2.pl
-rwxr-xr-x@ 1 Stanislaw  staff  3118 Dec 11  2011 8colors.sh
-rwxr-xr-x@ 1 Stanislaw  staff  2942 Dec 11  2011 acolors.sh
-rwxr-xr-x@ 1 Stanislaw  staff  3429 Dec 11  2011 doublechars.sh
-rwxr-xr-x@ 1 Stanislaw  staff  3412 Feb 26  2014 dynamic.pl
-rwxr-xr-x@ 1 Stanislaw  staff  2711 Dec 11  2011 dynamic.sh
-rwxr-xr-x@ 1 Stanislaw  staff  3359 Dec 11  2011 dynamic2.sh
-rwxr-xr-x@ 1 Stanislaw  staff  2661 Aug 10  2015 fonts.sh
-rwxr-xr-x@ 1 Stanislaw  staff  4841 Dec 28  2014 paste64.pl
-rwxr-xr-x@ 1 Stanislaw  staff  4313 Feb 26  2014 query-color.pl
-rwxr-xr-x@ 1 Stanislaw  staff  4713 Feb 26  2014 query-fonts.pl
-rwxr-xr-x@ 1 Stanislaw  staff  3669 Oct  7  2014 resize.pl
-rwxr-xr-x@ 1 Stanislaw  staff  3203 Dec 11  2011 resize.sh
-rwxr-xr-x@ 1 Stanislaw  staff  8263 Feb 26  2014 tcapquery.pl
-rwxr-xr-x@ 1 Stanislaw  staff  2850 Dec 11  2011 title.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-vttests-colors16-sh&#34;&gt;Example: ./vttests/colors16.sh&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/xterm_vttests_001_Colors16.gif&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-vttests-dynamic2-sh&#34;&gt;Example: ./vttests/dynamic2.sh&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/xterm_vttests_002_Dynamic2.gif&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-vttests-resize-sh&#34;&gt;Example: ./vttests/resize.sh&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/xterm_vttests_003_Resize.gif&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;vttest&#34;&gt;Vttest&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vttest tests the compatibility (demonstrates the non-compatibility) of so-called &amp;ldquo;VT100-compatible&amp;rdquo; terminals.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://invisible-island.net/vttest/vttest.html&#34;&gt;http://invisible-island.net/vttest/vttest.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vttest is an application which is used to demonstrate features of VT100 and related terminals, or emulations thereof, such as xterm. The program was originally written in 1986 by Per Lindberg. It has been maintained and extended since 1996 by Thomas Dickey, to test and demonstrate features of xterm.
&lt;a href=&#34;https://en.wikipedia.org/wiki/Vttest&#34;&gt;https://en.wikipedia.org/wiki/Vttest&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This program should be run inside a terminal program under test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_001_welcome.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;I have run &lt;code&gt;vttest&lt;/code&gt; in three terminals: XTerm, &lt;a href=&#34;http://www.apple.com/osx/apps/&#34;&gt;Terminal.app&lt;/a&gt; (default terminal of OS X) and &lt;a href=&#34;https://github.com/gnachman/iTerm2&#34;&gt;iTerm2&lt;/a&gt; (well-known open-source terminal emulator for OS X).&lt;/p&gt;

&lt;p&gt;On the following screenshots XTerm has white background - it always demonstrates correct expected behavior in &lt;code&gt;vttest&lt;/code&gt;. Terminal.app and iTerm2 have black background and sometimes diverge from expected by the test cases, they are hidden by default and can be expanded.&lt;/p&gt;

&lt;h3 id=&#34;example-cursor-movements&#34;&gt;Example: cursor movements&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_002_screen_should_be_cleared_xterm.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;Terminal.app&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_002_screen_should_be_cleared_nsterm.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;iTerm2&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_002_screen_should_be_cleared_iterm2.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;example-autowrap-mixing-control-and-print-characters&#34;&gt;Example: autowrap, mixing control and print characters.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_003_autowrap_xterm.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;Terminal.app&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_003_autowrap_nsterm.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;iTerm2&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_003_autowrap_iterm2.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;example-wrap-around-mode-setting&#34;&gt;Example: WRAP AROUND mode setting&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_004_wrap_around_xterm.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;Terminal.app&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_004_wrap_around_nsterm.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;iTerm2&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_004_wrap_around_iterm2.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;example-origin-mode-test&#34;&gt;Example: origin mode test&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_005_origin_mode_xterm.png&#34; width=&#34;760&#34;/&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;Terminal.app&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_005_origin_mode_nsterm.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;spoiler-collapsed&#34;&gt;
  &lt;a href=&#34;&#34; class=&#34;spoiler-control&#34; onclick=&#34;showSpoiler(this); return false;&#34;&gt;iTerm2&lt;/a&gt;
  &lt;div class=&#34;spoiler-content&#34;&gt;
    
    &lt;img src=&#34;http://systemundertest.org/img/sut_xterm/vttest_005_origin_mode_iterm2.png&#34; width=&#34;760&#34;/&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/p&gt;

&lt;h2 id=&#34;ncurses-test-programs&#34;&gt;ncurses test programs&lt;/h2&gt;

&lt;p&gt;ncurses test programs are part of &lt;a href=&#34;http://invisible-island.net/ncurses/&#34;&gt;ncurses&lt;/a&gt; source tree. However, they have a separate project page: &lt;a href=&#34;http://invisible-island.net/ncurses/ncurses-examples.html&#34;&gt;ncurses test programs&lt;/a&gt; and can be also obtained in a separate tar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ncurses test programs are used both for testing/demonstrating features of ncurses, as well as for occasional comparisons with other curses implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To understand what is tested here is definition of ncurses:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ncurses (new curses) is a programming library providing an application programming interface (API) that allows the programmer to write text-based user interfaces in a terminal-independent manner. It is a toolkit for developing &amp;ldquo;GUI-like&amp;rdquo; application software that runs under a terminal emulator. It also optimizes screen changes, in order to reduce the latency experienced when using remote shells.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Strictly speaking, System Under Test for these programs is &lt;code&gt;ncurses&lt;/code&gt;, not &lt;code&gt;XTerm&lt;/code&gt;, however running these programs from a terminal-emulator-under-test can give a large amount of additional testing information for &lt;code&gt;XTerm&lt;/code&gt; especially because the maintainer of both &lt;code&gt;ncurses&lt;/code&gt; and &lt;code&gt;XTerm&lt;/code&gt; is the same person.&lt;/p&gt;

&lt;p&gt;Excerpt from README:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The programs in this directory are used to test and demonstrate ncurses.
Some are interesting in themselves, while others merely show how some of
the library calls are used.  Some date back to the initial releases of
ncurses during the mid-1990s, such as:

    blue       - Blue Moon, a nifty solitaire (uses color)
    bs.c       - the game of Battleships (uses color)
    firework.c - multi-colored fireworks (uses color)
    gdc.c      - Great Digital Clock (uses color)
    hanoi.c    - the game of hanoi (uses color essentially)
    knight.c   - the game of Knight&#39;s Tour (uses color)
    lrtest.c   - test of access to the lower-right corner
    ncurses.c  - multi-test program (uses color)
    newdemo.c  - another test from PDCurses (uses color)
    rain.c     - rain drops keep falling on my head...
    tclock.c   - analog/digital clock
    testcurs.c - a test from the PDCurses people (uses color)
    tracemunch - Perl script to make trace scripts easier to read
    worm.c     - worms run all over your screen (uses color)
    xmas.c     - Xmas greeting card
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-worm&#34;&gt;Example: Worm&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/ncurses-test-programs-001-worm.gif&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-great-digital-clock&#34;&gt;Example: Great digital clock&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/ncurses-test-programs-002-gdc.gif&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-xmas-greeting-card&#34;&gt;Example: Xmas greeting card&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_xterm/ncurses-test-programs-003-xmas.gif&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;XTerm has 3 groups of tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perl/bash test scripts in XTerm&amp;rsquo;s tree&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vttest&lt;/code&gt; program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ncurses test programs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Vttest&lt;/code&gt; and &lt;code&gt;ncurses test programs&lt;/code&gt; can be used to test any terminal emulator, however their main system-under-test is XTerm.&lt;/p&gt;

&lt;p&gt;All of 3 test groups are &lt;strong&gt;manual&lt;/strong&gt;, &lt;strong&gt;visual&lt;/strong&gt; tests that have to be run from terminal emulator which is under test. Developer has to run these tests manually to compare expected visual output with actual visual output and look for discrepancies.&lt;/p&gt;

&lt;h2 id=&#34;more-about-testing-in-system-under-test-blog&#34;&gt;More about testing in System Under Test blog&lt;/h2&gt;

&lt;p&gt;If you want to see some tool or project covered in this blog, or if you want to contribute a post about some tool or project - let us know: &lt;a href=&#34;mailto:contact@systemundertest.org&#34;&gt;contact@systemundertest.org&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GNU Make</title>
      <link>http://systemundertest.org/gnu-make/</link>
      <pubDate>Sun, 12 Jun 2016 21:05:00 +0200</pubDate>
      
      <guid>http://systemundertest.org/gnu-make/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; the author of this post is not involved into a development of GNU Make project. All of the following is merely a high-level report about what a curious developer can see from looking at GNU Make&amp;rsquo;s source code. The author didn&amp;rsquo;t go very deep into the topic, could overlook something etc. Having that said, we always appreciate feedback from our colleagues who have advanced experience with the projects we write about, especially from the developers and maintainers.&lt;/p&gt;

&lt;h3 id=&#34;getting-gnu-make-s-sources&#34;&gt;Getting GNU Make&amp;rsquo;s sources&lt;/h3&gt;

&lt;p&gt;GNU Make&amp;rsquo;s source code is available from git repository and can be found 2 links away from the Make&amp;rsquo;s main home page: &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Development&lt;/p&gt;

&lt;p&gt;For development sources, issue trackers, and other information, please see the Make project page at savannah.gnu.org.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On &lt;a href=&#34;http://savannah.gnu.org/projects/make&#34;&gt;Make&amp;rsquo;s Savannah&amp;rsquo;s page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://savannah.gnu.org/git/?group=make&#34;&gt;Git Source Code Manager: Git Repository&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get Make&amp;rsquo;s sources:&lt;/p&gt;

&lt;pre&gt;
git clone git://git.savannah.gnu.org/make.git GNUMake
cd make
&lt;/pre&gt;

&lt;h3 id=&#34;good-news-make-has-tests&#34;&gt;Good news: Make has tests&lt;/h3&gt;

&lt;pre&gt;
$ ls -l tests/
total 376
-rw-r--r--   1 Stanislaw  staff  35147 May 27 20:54 COPYING
-rw-r--r--   1 Stanislaw  staff  48828 May 27 20:54 ChangeLog.1
-rw-r--r--   1 Stanislaw  staff   6765 May 27 20:54 NEWS
-rw-r--r--   1 Stanislaw  staff   4677 May 27 20:54 README
-rw-r--r--   1 Stanislaw  staff    470 May 27 20:54 config-flags.pm.in
-rwxr-xr-x   1 Stanislaw  staff   1705 May 27 20:54 config_flags_pm.com
-rw-r--r--   1 Stanislaw  staff    359 May 27 20:54 guile.supp
-rwxr-xr-x   1 Stanislaw  staff   1424 May 27 20:54 mkshadow
-rwxr-xr-x   1 Stanislaw  staff     36 May 27 20:54 run_make_tests
-rwxr-xr-x   1 Stanislaw  staff   8330 May 27 20:54 run_make_tests.com
-rw-r--r--   1 Stanislaw  staff  14179 May 27 20:54 run_make_tests.pl
drwxr-xr-x  10 Stanislaw  staff    340 May 27 20:54 scripts
-rw-r--r--   1 Stanislaw  staff  40197 May 27 20:54 test_driver.pl
&lt;/pre&gt;

&lt;p&gt;The actual tests are located in &lt;code&gt;tests/scripts&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;
$ ls -l tests/scripts
total 8
drwxr-xr-x  40 Stanislaw  staff  1360 Jun  2 21:47 features
drwxr-xr-x  31 Stanislaw  staff  1054 May 27 20:54 functions
drwxr-xr-x  10 Stanislaw  staff   340 May 27 20:54 misc
drwxr-xr-x  18 Stanislaw  staff   612 May 29 10:22 options
drwxr-xr-x  12 Stanislaw  staff   408 Jun 10 20:42 targets
-rw-r--r--   1 Stanislaw  staff  1015 May 27 20:54 test_template
drwxr-xr-x  22 Stanislaw  staff   748 May 27 20:54 variables
drwxr-xr-x   3 Stanislaw  staff   102 May 27 20:54 vms
&lt;/pre&gt;

&lt;p&gt;The following are interesting notes I found before running the tests.&lt;/p&gt;

&lt;h4 id=&#34;the-oldest-update-in-news-file-dates-back-to-1992&#34;&gt;The oldest update in NEWS file dates back to 1992&lt;/h4&gt;

&lt;pre&gt;
Changes from 0.1 to 0.2 (5-4-92):

README corrected to require perl 4.019, not 4.010.

-make_path replaces -old.

errors_in_commands test updated for change in format introduced in
make 3.62.6.

test_driver_core now uses a better way of figuring what OS it is
running on (thanks to meyering@cs.utexas.edu (Jim Meyering) for
suggesting this, as well as discovering the hard way that the old
way (testing for /mnt) fails on his machine).

Some new tests were added.
&lt;/pre&gt;

&lt;p&gt;This means that &lt;strong&gt;tests in Make were introduced as early as of 1992!&lt;/strong&gt; which is a very good sign given some other tools are likely to not have a good coverage even in present days as described in another article of this series: &lt;a href=&#34;http://systemundertest.org/freebsd&#34;&gt;System Under Test: FreeBSD&lt;/a&gt; (see Conclusion there).&lt;/p&gt;

&lt;h4 id=&#34;the-test-suite-requires-perl-and-can-be-run-on-unix-windows-and-dos-systems&#34;&gt;The test suite requires Perl and can be run on UNIX, Windows and DOS systems&lt;/h4&gt;

&lt;pre&gt;
To run the test suite on a UNIX system, use &#34;perl ./run_make_tests&#34;
(or just &#34;./run_make_tests&#34; if you have a perl on your PATH).

To run the test suite on Windows NT or DOS systems, use
&#34;perl.exe ./run_make-tests.pl&#34;.
&lt;/pre&gt;

&lt;h4 id=&#34;the-test-suite-is-run-against-make-executable&#34;&gt;The test suite is run against Make executable&lt;/h4&gt;

&lt;pre&gt;
By default, the test engine picks up the first executable called &#34;make&#34;
that it finds in your path.  You may use the -make_path option (i.e.,
&#34;perl run_make_tests -make_path /usr/local/src/make-3.78/make&#34;) if
you want to run a particular copy.  This now works correctly with
relative paths and when make is called something other than &#34;make&#34; (like
&#34;gmake&#34;).
&lt;/pre&gt;

&lt;p&gt;This observation leads us to conclusion that these &lt;strong&gt;GNU Make&amp;rsquo;s tests are actually integration tests&lt;/strong&gt; - it is the final &lt;code&gt;make&lt;/code&gt; executable that is tested, not its parts like they would be with unit testing (depending on terminology this kind of testing of a final product can also be called functional or acceptance testing).&lt;/p&gt;

&lt;h4 id=&#34;build-artefacts&#34;&gt;Build artefacts&lt;/h4&gt;

&lt;pre&gt;
A directory named &#34;work&#34; will be created when the tests are run which
will contain any makefiles and &#34;diff&#34; files of tests that fail so that
you may look at them afterward to see the output of make and the
expected result.
&lt;/pre&gt;

&lt;h3 id=&#34;running-tests-against-default-osx-make&#34;&gt;Running tests against default OSX Make&lt;/h3&gt;

&lt;p&gt;Having read both documents: &lt;code&gt;tests/NEWS&lt;/code&gt; and &lt;code&gt;tests/README&lt;/code&gt; let&amp;rsquo;s try to run the tests. As we learned earlier, by default the test suite will pick up first &lt;code&gt;make&lt;/code&gt; from path so it will default to default make of OSX system which is on my machine:&lt;/p&gt;

&lt;pre&gt;
make -v
GNU Make 3.81
Copyright (C) 2006  Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

This program built for i386-apple-darwin11.3.0
&lt;/pre&gt;

&lt;p&gt;If you ever wondered why default &lt;code&gt;make&lt;/code&gt; on OS X is so old, you are in good company - see &lt;a href=&#34;https://www.quora.com/What-is-the-reason-for-some-of-the-Linux-tools-on-OS-X-being-so-old-Is-this-related-to-GPL-licensing&#34;&gt;What is the reason for some of the Linux tools on OS X being so old? Is this related to GPL licensing?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To run tests:&lt;/p&gt;

&lt;pre&gt;
$ cd tests/
$ # The following has to be done otherwise script will complain with:
$ # &#34;Can&#39;t locate config-flags.pm in @INC...&#34;
$ cp config-flags.pm.in config-flags.pm
$ ./run_make_tests
...
output with lots of errors and finally:
212 Tests in 66 Categories Failed (See .diff* files in work dir for details) :-(
&lt;/pre&gt;

&lt;p&gt;We see here that oldness of default Make on OS X does cost 212 failing tests. I assume that the reason why most of these failing tests are failing is not a regression in core functionality of Make but rather because of new features were added to GNU Make since 2006.&lt;/p&gt;

&lt;p&gt;To understand how that is different for latest Make let&amp;rsquo;s build it from source and run tests against it.&lt;/p&gt;

&lt;h3 id=&#34;running-tests-against-latest-make-built-from-source&#34;&gt;Running tests against latest Make built from source&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s get back from &lt;code&gt;tests&lt;/code&gt; directory one level up to the root directory of source tree. Inspired by the instructions in INSTALL and after some additional googling we need to run &lt;code&gt;autoreconf&lt;/code&gt; so that it creates proper &lt;code&gt;configure&lt;/code&gt; script for us:&lt;/p&gt;

&lt;pre&gt;
$ pwd # /Users/Stanislaw/Projects/GNUMake
$ brew install automake
$ # gettext is needed by autoreconf to locate gettext,
$ # be careful with force linking it on your system.
$ brew install gettext
$ brew link gettext --force
$ autoreconf # creates &#39;configure&#39; script
&lt;/pre&gt;

&lt;p&gt;Then we want to run this newly created script with &lt;code&gt;--prefix&lt;/code&gt; parameter so that it will not install make to the &lt;code&gt;/usr/local/bin&lt;/code&gt; directory but rather to &lt;code&gt;./Build&lt;/code&gt; directory (to not conflict with OSX&amp;rsquo;s Make which we don&amp;rsquo;t want within the scope of this post).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;./configure --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/Build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point if you run &lt;code&gt;make&lt;/code&gt; the very first time you will likely see errors about some localization files missing:&lt;/p&gt;

&lt;pre&gt;
Making all in doc
Updating ./version.texi
make[2]: *** No rule to make target `fdl.texi&#39;, needed by `make.info&#39;.  Stop.
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2
&lt;/pre&gt;

&lt;p&gt;To fix that you have to first run (solution found at &lt;a href=&#34;http://gnu-make.2324884.n4.nabble.com/NLS-related-failure-when-building-make-from-CVS-tp2157p2158.html&#34;&gt;GNU Make forums&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything should work fine since then, finally we run:&lt;/p&gt;

&lt;pre&gt;
$ make &amp;&amp; make install
...
  /usr/bin/install -c make &#39;/Users/Stanislaw/Projects/Make/GNUMake/Build/bin&#39;
...
$ ./Build/bin/make --version
GNU Make 4.2
Built for x86_64-apple-darwin15.3.0
Copyright (C) 1988-2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
&lt;/pre&gt;

&lt;p&gt;Which is 2006&amp;rsquo;s Make 3.81 that has just been used to build 2016&amp;rsquo;s Make 4.2!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run the tests!&lt;/p&gt;

&lt;pre&gt;
$ cd tests
$ ./run_make_tests -make ../Build/bin/make
&lt;/pre&gt;

&lt;p&gt;The results are quite pleasant to look at - &lt;strong&gt;GNU Make built from latest source code on Mac OS X machine, passes all of its tests&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;581 Tests in 118 Categories Complete ... No Failures :-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;test-case-template&#34;&gt;Test case template&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;tests/scripts/test_template&lt;/code&gt; is a generic template, most of the tests are based on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;FILL IN SHORT DESCRIPTION HERE&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;FILL IN DETAILS OF HOW YOU TEST WHAT YOU SAY YOU ARE TESTING&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Run a make test.  See the documentation of run_make_test() in&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# run_make_tests.pl, but briefly the first argument is a string with the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# contents of a makefile to be tested, the second is a string containing the&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# arguments to be passed to the make invocation, the third is a string&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# containing the expected output.  The fourth is the expected exit code for&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# make.  If not specified, it&amp;#39;s assumed that the make program should succeed&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# (exit with 0).&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Your test makefile goes here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;Arguments to pass to make go here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;Expected output from the invocation goes here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# There are various special tokens, options, etc.  See the full documentation&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# in run_make_tests.pl.&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# This tells the test driver that the perl test script executed properly.&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other tests follow a bit different approach: they use &lt;code&gt;run_make_with_options&lt;/code&gt;/&lt;code&gt;compare_output&lt;/code&gt; pair of functions to verify the expected output that Make produces. My assumption is that this alternative way is the old way of writing tests - we can clearly see that it is the easier and cleaner way to write tests using the test template from above. Below I have collected 3 examples which use both approaches based on either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run_make_test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run_make_with_options&lt;/code&gt;/&lt;code&gt;compare_output&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These functions are located in the file: &lt;code&gt;tests/run_make_tests.pl&lt;/code&gt; which is a test driver file for the whole test suite (the file is too long so it is not discussed in this post).&lt;/p&gt;

&lt;h4 id=&#34;test-case-example-1-simple-functionality-of-make&#34;&gt;Test case example #1: Simple functionality of make&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/misc/general1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;


&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;The following test creates a makefile to test the&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;simple functionality of make.  It mimics the&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;rebuilding of a product with dependencies.&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;It also tests the simple definition of VPATH.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;gt; $makefile&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;VPATH = $workdir&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;edit:  main.o kbd.o commands.o display.o \\&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;       insert.o&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -o edit main.o kbd.o commands.o display.o \\&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                  insert.o&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;main.o : main.c defs.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c main.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;kbd.o : kbd.c defs.h command.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c kbd.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;commands.o : command.c defs.h command.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c commands.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;display.o : display.c defs.h buffer.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c display.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;insert.o : insert.c defs.h buffer.h&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;\t\@echo cc -c insert.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;


&lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}main.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}defs.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}kbd.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}command.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}commands.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}display.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}buffer.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}insert.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	       &lt;span class=&#34;s&#34;&gt;&amp;quot;$workdir${pathsep}command.c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_make_with_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$makefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Create the answer to what should be produced by this Makefile&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;cc -c main.c\ncc -c kbd.c\ncc -c commands.c\ncc -c display.c&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;cc -c insert.c\ncc -o edit main.o kbd.o commands.o display.o insert.o\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# COMPARE RESULTS&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compare_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;unlink&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@files_to_touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;test-case-example-2-phony-targets&#34;&gt;Test case example #2: PHONY targets&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/targets/PHONY&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;The following tests the use of a PHONY target.  It makes\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;sure that the rules under a target get executed even if\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;a filename of the same name of the target exists in the\n&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;directory.\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;This makefile in this test declares the target clean to be a \n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;PHONY target.  We then create a file named \&amp;quot;clean\&amp;quot; in the \n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;directory.  Although this file exists, the rule under the target\n&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean should still execute because of it&amp;#39;s phony status.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;EXAMPLE_FILE&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;gt; $makefile&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# The Contents of the MAKEFILE ...&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;.PHONY : clean \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;all: \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;\t\@echo This makefile did not clean the dir ... good\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;clean: \n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;\t$delete_command $example clean\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# END of Contents of MAKEFILE&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Create a file named &amp;quot;clean&amp;quot;.  This is the same name as the target clean&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# and tricks the target into thinking that it is up to date.  (Unless you&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# use the .PHONY target.&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;$delete_command $example clean\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_make_with_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$makefile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;clean&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$test_passed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compare_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;test-case-example-3-warn-undefined-variables-option&#34;&gt;Test case example #3: &amp;ndash;warn-undefined-variables option&lt;/h4&gt;

&lt;p&gt;The following test is located at &lt;code&gt;tests/scripts/options/warn-undefined-variables&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-pl&#34; data-lang=&#34;pl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#                                                                    -*-perl-*-&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Test the --warn-undefined-variables option.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Verify that warnings are printed for referencing undefined variables.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Without --warn-undefined-variables, nothing should happen&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EMPTY =&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EREF = $(EMPTY)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;UREF = $(UNDEFINED)&lt;/span&gt;

&lt;span class=&#34;s&#34;&gt;SEREF := $(EREF)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;SUREF := $(UREF)&lt;/span&gt;

&lt;span class=&#34;s&#34;&gt;all: ; @echo ref $(EREF) $(UREF)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# With --warn-undefined-variables, it should warn me&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;run_make_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;undef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;--warn-undefined-variables&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;s&#34;&gt;&amp;quot;#MAKEFILE#:7: warning: undefined variable &amp;#39;UNDEFINED&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;#MAKEFILE#:9: warning: undefined variable &amp;#39;UNDEFINED&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;open-issues&#34;&gt;Open issues&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;tests/README&lt;/code&gt; contains interesting section that one may read as high-level TODO list for the project (bold below is mine). It seems that there is some interesting stuff waiting for someone to contribute ;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;open-issues-1&#34;&gt;Open Issues&lt;/h2&gt;

&lt;p&gt;The test suite has a number of problems which should be addressed. &lt;strong&gt;One
VERY serious one is that there is no real documentation&lt;/strong&gt;.  You just have
to see the existing tests. Use the newer tests: many of the tests
haven&amp;rsquo;t been updated to use the latest/greatest test methods.  See the
ChangeLog in the tests directory for pointers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The second serious problem is that it&amp;rsquo;s not parallelizable&lt;/strong&gt;: it scribbles
all over its installation directory and so can only test one make at a
time. &lt;strong&gt;The third serious problem is that it&amp;rsquo;s not relocatable&lt;/strong&gt;: the only
way it works when you build out of the source tree is to create
symlinks, which doesn&amp;rsquo;t work on every system and is bogus to boot. &lt;strong&gt;The
fourth serious problem is that it doesn&amp;rsquo;t create its own sandbox when
running tests&lt;/strong&gt;, so that if a test forgets to clean up after itself that
can impact future tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;GNU Make has 581 tests: solid test suite introduced as early as of 1992.&lt;/li&gt;
&lt;li&gt;All of these tests are integration tests: the final executable &lt;code&gt;make&lt;/code&gt; is tested, not the parts of C code.&lt;/li&gt;
&lt;li&gt;Default GNU Make 3.81 on OSX machine is 10 years old, it fails 212 tests compared to the latest GNU Make 4.2 build from source which passes all of its tests green.&lt;/li&gt;
&lt;li&gt;There is always space for contribution: more documentation is needed, tests should have better sandboxing to achieve parallelism and removability.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us know what projects or tools you would like to see covered in this series: &lt;a href=&#34;http://systemundertest.org/&#34;&gt;System Under Test&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeBSD</title>
      <link>http://systemundertest.org/freebsd/</link>
      <pubDate>Thu, 31 Mar 2016 17:22:59 +0200</pubDate>
      
      <guid>http://systemundertest.org/freebsd/</guid>
      <description>

&lt;h3 id=&#34;what-is-the-project-about&#34;&gt;What is the project about?&lt;/h3&gt;

&lt;p&gt;FreeBSD is a well known Unix-based operating system.&lt;/p&gt;

&lt;h3 id=&#34;tests&#34;&gt;Tests&lt;/h3&gt;

&lt;p&gt;FreeBSD has one test suite. It contains ~3.6k tests and takes ~7.5 minutes to run on a virtual machine with 2Gb of RAM.&lt;/p&gt;

&lt;h4 id=&#34;getting-tests&#34;&gt;Getting Tests&lt;/h4&gt;

&lt;p&gt;The tests can be found in &lt;code&gt;/usr/tests&lt;/code&gt; directory. Though, you may not have them there because of one of the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test suite is not a part of any distribution prior to FreeBSD 10.0.&lt;/li&gt;
&lt;li&gt;Test suite is available out of the box only on FreeBSD 11.0 and newer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are on FreeBSD 10.0 and want to see tests, then you just need to re-build the system from sources.
Fortunately, it is very easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;WITH_TESTS=YES&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/src.conf
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /usr/src
make buildworld
make installworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;running-tests&#34;&gt;Running tests&lt;/h4&gt;

&lt;p&gt;FreeBSD adopted approach used by NetBSD project. Within the approach they included the toolchain: &lt;a href=&#34;https://github.com/jmmv/kyua&#34;&gt;Kyua&lt;/a&gt; and &lt;a href=&#34;https://github.com/jmmv/atf/&#34;&gt;ATF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially ATF provided both tools (e.g. test runner, report generator, etc.) and libraries (e.g. test cases, assertions, etc.). Over the years tools from ATF were replaced by Kyua.&lt;/p&gt;

&lt;p&gt;To run tests you need to point &lt;code&gt;kyua&lt;/code&gt; to a &lt;code&gt;Kyuafile&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /usr/tests
kyua &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -k ./Kyuafile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;when it’s done you may request report:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kyua report
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which shows brief information for all non-succeeded test and a summary, such as this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://systemundertest.org/img/sut_freebsd/test_report.png&#34;
  style=&#34; display: block;
          margin-left: auto;
          margin-right: auto;
          width: 100%;
          height: auto;&#34;
  alt=&#34;Test report&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;toolchain&#34;&gt;Toolchain&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Kyuafile&lt;/code&gt; specifies which tests to run. It also can include other &lt;code&gt;Kyuafile&lt;/code&gt;s. Here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;lib/Kyuafile&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;atf_test_program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;some_atf_test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plain_test_program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;some_plain_test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tap_test_program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;some_tap_test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When run &lt;code&gt;kyua&lt;/code&gt; will execute all tests specified in &lt;code&gt;lib/Kyuafile&lt;/code&gt; (and in &lt;code&gt;Kyuafile&lt;/code&gt;s included from &lt;code&gt;lib/Kyuafile&lt;/code&gt;), and then will execute three tests: ATF test &lt;code&gt;some_atf_test&lt;/code&gt;, plain test &lt;code&gt;some_plain_test&lt;/code&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/Test_Anything_Protocol&#34;&gt;TAP&lt;/a&gt; test &lt;code&gt;some_tap_test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Plain test is basically a simple program that returns non-zero if test failed and zero otherwise.&lt;/p&gt;

&lt;p&gt;TAP tests are any possible tests, the only important thing there  is an output. If test prints &amp;ldquo;ok whatever&amp;rdquo; then it succeeded, if it prints &amp;ldquo;not ok whatnot&amp;rdquo; - it has failed.&lt;/p&gt;

&lt;p&gt;ATF tests intended to be more sophisticated. They may contain several test cases per file and provide useful information besides the exit code. Also, the tests may be written using C, C++ and shell.&lt;/p&gt;

&lt;p&gt;Here is a part of an ATF test written in shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;test5678901234567&amp;quot;&lt;/span&gt;

atf_test_case longname cleanup

longname_head&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  atf_set &lt;span class=&#34;s2&#34;&gt;&amp;quot;require.user&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;
  atf_set &lt;span class=&#34;s2&#34;&gt;&amp;quot;descr&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Test that usernames longer than 16 &amp;quot;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;quot;characters are allowed (PR bin/39546)&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

longname_body&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  atf_check -s &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;:0 -o ignore -e ignore -x &lt;span class=&#34;s2&#34;&gt;&amp;quot;pw useradd $username&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

longname_cleanup&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  atf_check -s ignore -o ignore -e ignore -x &lt;span class=&#34;s2&#34;&gt;&amp;quot;pw userdel $username&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

atf_init_test_cases&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  atf_add_test_case longname
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you try to find there a test written let’s say in C, then you will not succeed. All tests under &lt;code&gt;/usr/tests&lt;/code&gt; are executables.
The reason is that FreeBSD tools and libraries usually have their tests source code in their source tree. During installation these tests are compiled and copied to the &lt;code&gt;/usr/tests&lt;/code&gt;.
For example, if you want to see tests for libc’ stdio, then you need to look at &lt;code&gt;/usr/src/lib/libc/tests/stdio&lt;/code&gt;.
At the moment there is one test, here is part of it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;ATF_TC_WITHOUT_HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_append_binary_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ATF_TC_BODY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_append_binary_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  * For compatibility with other implementations (glibc), we set the&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  * position to 0 when opening an automatically allocated binary stream&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  * for appending.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmemopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;ab+&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ATF_REQUIRE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ftell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  * Make sure that a pre-allocated buffer behaves correctly.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmemopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;ab+&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ATF_REQUIRE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ftell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;FreeBSD has ~3.6k tests. The amount of tests is suspiciously small for such a big project. Since I was (and still am) afraid that I missed some important part I did ask on mailing list &lt;a href=&#34;https://lists.freebsd.org/pipermail/freebsd-testing/2016-March/001306.html&#34;&gt;question about available tests&lt;/a&gt;, but didn’t
get any answer so far.&lt;/p&gt;

&lt;p&gt;FreeBSD has lots of various tools and libraries, but not all of them tested.&lt;/p&gt;

&lt;p&gt;Maybe it’s a good starting point for a contribution?&lt;/p&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;man 7 tests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.freebsd.org/TestSuite&#34;&gt;FreeBSD Test Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.netbsd.org/kyua/&#34;&gt;Kyua: An introduction for NetBSD users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jmmv/kyua/wiki/About&#34;&gt;Kyua: project wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test_Anything_Protocol&#34;&gt;Test Anything Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Wine</title>
      <link>http://systemundertest.org/interview/wine/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://systemundertest.org/interview/wine/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This is a cross-post from &lt;a href=&#34;https://www.bronevichok.ru/blog/&#34;&gt;https://www.bronevichok.ru&lt;/a&gt;. Original post is &lt;a href=&#34;https://bronevichok.ru/blog/2014/09/23/testing-of-wine.html&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.winehq.org/about/&#34;&gt;Wine&lt;/a&gt; — is a free software that gives a capability to run 16-, 32-, and 64-bit Microsoft Windows applications on UNIX-like systems. Its name is a recursive acronym, which stands for &amp;ldquo;Wine Is Not Emulator&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Maintainer of the project Alexandre Julliard kindly answered my questions regarding development and testing of Wine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please introduce yourself.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve been the maintainer of the Wine project for the past 20 years. Surprisingly, I still enjoy doing it ;-) In my daytime job, I’m CTO of CodeWeavers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How much developers involved in development? How development process of Wine looks like?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are probably around 30-40 active developers at any given time, though of course people come and go regularly. Similarly to the Linux kernel, we use the benevolent dictator model, so I’m the only one with commit access to the main tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How testing process looks like?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have automated unit tests for most of the code, that are run on every change. For application testing, we have a large user community that complains loudly everytime we break their favorite application ;-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What tools, tests and testing frameworks do you use?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is an extensive unit testing framework in the Wine tree, which we developed ourselves. Basically it consists of a set of small programs that exercise features of the Windows APIs and check the results. By running the tests both on Wine and on actual Windows sytems, we can make sure that Wine is compatible with all the quirks of the corresponding Windows APIs.&lt;/p&gt;

&lt;p&gt;Test runs are submitted to a central server that gathers statistics of results across plaforms and across code revisions. Results can be seen at &lt;a href=&#34;https://test.winehq.org&#34;&gt;https://test.winehq.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also have a tesbot system (&lt;a href=&#34;https://testbot.winehq.org&#34;&gt;https://testbot.winehq.org&lt;/a&gt;) that allows developers to submit new tests and have them run across a range of Windows systems, since it’s not possible for every developer to have access to every Windows version locally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I know Wine project has a tool ‘wineoops’ for gathering crash statistics. How it works and how it helps in development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s a very experimental tool, we don’t really use it all that much. The idea is that it would crawl the web looking for crash reports, to allow us to spot common crashes and solve them in priority. But it only works well for specific categories of crashes, like unimplemented functions, that have a well-known crash signature. Otherwise we mostly rely on individual bug reports to gather crash logs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you create tests to cover new features and found bugs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most changes come with their own test, to prove that the change conforms to the Windows behavior. The Windows APIs often behave in mysterious ways, so I usually require tests even for changes that look straightforward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What kind of testing do you use (performance, functional, compatibility, stability, unit testing etc)? Is it automated testing or manual testing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unit testing is all automated. The unit test suite is run daily on Windows, and after every commit on Wine, and any discrepancy indicates a bug. It’s all compatibility and functional testing, we don’t do performance testing at the unit level.&lt;/p&gt;

&lt;p&gt;Application testing is done manually by users. Any regression is reported, and once bisected it’s logged into the regression tracker (aka Hall of Shame) at &lt;a href=&#34;https://source.winehq.org/regressions&#34;&gt;https://source.winehq.org/regressions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you use negative testing techniques (like fuzz testing, fault injection etc)?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not explicitly, but running actual Windows applications is actually a pretty good exercise in negative testing. Windows applications very often pass wrong info or outright garbage to our APIs. There is a lot of very bad code out there…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you measure code coverage? How often?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Code coverage isn’t very meaningful in our case. Since the tests are meant to exercise Windows APIs, we would need to measure the coverage of our test suite against the Windows code, which of course we don’t have access to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you use Continuous Integration in development process?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, all proposed changes are run automatically run through the test suite by the Testbot server. The full suite is also run before the patches become part of the mainline tree. Once they have passed the tests, updates to the mainline are made available once a day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you involve volunteers to testing? I mean thing like ‘crowd sourcing’.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For application testing, yes, it’s all done by users. There’s no way that Wine developers could possibly test the thousands of Windows applications out there, but the users community is very large and provides good coverage of most applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s imagine someone wants to help with testing. How to start?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best way is to find an application that interests you, test it regularly and report any problems. In particular, doing a git bisect when a new problem is found is extremely helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What tool do you use for tracking open bugs? Who is responsible in tracking of open bugs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We use Bugzilla (&lt;a href=&#34;https://bugs.winehq.org&#34;&gt;https://bugs.winehq.org&lt;/a&gt;). It’s managed by volunteers from our community. We have a good team of bugzilla volunteers who do a great job of massaging the bug reports to make them useful for developers. This is especially important since in most cases developers do not have access to the original Windows application, so they cannot reproduce the bug themselves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you use regular security audit of code?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, we haven’t really focused on security at this point. Our view is that since the goal of Wine is to run arbitrary Windows code anyway, security is better enforced outside of it, i.e. with Unix user separation and permissions, various sandbox mechanisms, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you use static or dynamic code analysis tools or services like Coverity? Or maybe another techniques directed to improving quality of code?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We use Coverity and Valgrind extensively, as well as other diagnostic tools. There’s over a thousand fixes in our code base that are directly attributable to code analysis tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who is responsible for releasing of new version? What are the release criterias?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Development snapshots are released every two weeks. These are only snapshots so there are no release criteria.&lt;/p&gt;

&lt;p&gt;Stable releases happen every year or two. The criteria are mostly that there is some interesting new feature, with as few regressions as possible (ideally zero, but that’s usually not realistic). I’m responsible for making the releases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What was the most interesting bug in your practice? :)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The most interesting bugs usually happen in the applications. Wine is actually a very good tool for finding bugs in Windows applications ;-)&lt;/p&gt;

&lt;p&gt;I fondly remember the bug where an application would start crashing once the tick counter returned a negative number. It’s a 32-bit milliseconds counter, so that would happen after about 25 days of uptime. This was in the Windows 95 days, so of course there was no such thing as a Windows box with 25 days of uptime, so the crash only happened on Wine ;-)&lt;/p&gt;

&lt;h3 id=&#34;more-information-on-wine-testing&#34;&gt;More information on Wine testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;wineoops – A statistical approach to Wine crashes&amp;rdquo; &lt;a href=&#34;http://people.redhat.com/mstefani/wineoops/wineoops-wineconf2009.pdf&#34;&gt;PDF&lt;/a&gt; &lt;a href=&#34;http://www.archive.org/download/Wineconf2009/stefaniucwineoops2009.ogv&#34;&gt;OGV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;WineTestBot - A Wine gatekeeper and test farm for Wine developers&amp;rdquo; &lt;a href=&#34;https://wiki.winehq.org/images/6/6c/WineConf2013-WTB.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
